package blocks

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v4/blocks"
	"github.com/nathanhollows/Rapua/v4/models"
)

templ passwordPlayer(settings models.InstanceSettings, block blocks.PasswordBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
	>
		if settings.EnablePoints && block.Points > 0 {
			<span class="indicator-item indicator-top indicator-center badge badge-info">{ fmt.Sprint(block.GetPoints()) } pts</span>
		}
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Prompt))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-swap="none"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<label
					for={ fmt.Sprintf("answer-%s", block.ID) }
					class="form-control w-full"
				>
					if data.IsComplete() {
						<input
							id={ fmt.Sprintf("answer-%s", block.ID) }
							name="answer"
							type="text"
							placeholder="Answer"
							class="input input-primary join-item w-full max-w-xs"
							autoComplete="off"
							value={ block.Answer }
							disabled
						/>
					} else {
						<div class="join w-full">
							<input
								id={ fmt.Sprintf("answer-%s", block.ID) }
								name="answer"
								type="text"
								placeholder="Answer"
								class="input input-primary join-item w-full max-w-xs"
								autoComplete="off"
								required
							/>
							<button
								type="submit"
								class="btn btn-primary btn-outline join-item rounded-r-full"
							>
								Check
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal w-4 h-5"><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16"></path></svg>
							</button>
						</div>
					}
				</label>
				if data.IsComplete() && block.UnlockedContent != "" {
					@templ.Raw(stringToMarkdown(block.UnlockedContent))
				}
			</form>
		</div>
	</div>
}

templ passwordPlayerUpdate(settings models.InstanceSettings, block blocks.PasswordBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
		hx-swap-oob="true"
	>
		if settings.EnablePoints && block.Points > 0 {
			<span class="indicator-item indicator-top indicator-center badge badge-info">{ fmt.Sprint(block.GetPoints()) } pts</span>
		}
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Prompt))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-swap="none"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<label
					for={ fmt.Sprintf("answer-%s", block.ID) }
					class="form-control w-full"
				>
					if data.IsComplete() {
						<input
							id={ fmt.Sprintf("answer-%s", block.ID) }
							name="answer"
							type="text"
							placeholder="Answer"
							class="input input-primary join-item w-full max-w-xs"
							autoComplete="off"
							value={ block.Answer }
							disabled
						/>
					} else {
						<div class="join w-full animate-[wobble_1s_ease-in-out]">
							<input
								id={ fmt.Sprintf("answer-%s", block.ID) }
								name="answer"
								type="text"
								placeholder="Answer"
								class="input input-primary join-item w-full max-w-xs"
								autoComplete="off"
								required
							/>
							<button
								type="submit"
								class="btn btn-primary btn-outline join-item rounded-r-full"
							>
								Check
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal w-4 h-5"><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16"></path></svg>
							</button>
						</div>
					}
				</label>
				if data.IsComplete() && block.UnlockedContent != "" {
					@templ.Raw(stringToMarkdown(block.UnlockedContent))
				}
			</form>
		</div>
	</div>
}

var passwordPromptTextarea = TextareaParams{
	Name:        "prompt",
	Title:       "Prompt",
	Placeholder: "What is the third word of the second paragraph? What is the middle name of the person wearing a red hat?",
	Markdown:    true,
	Required:    true,
	HelpText:    "Include a formatting hint in the prompt if necessary.",
}

var passwordAnswerInput = TextInputParams{
	Name:         "answer",
	Title:        "Answer",
	Placeholder:  "e.g. 'elephant' or 'Ada Lovelace'",
	Required:     true,
	ExtraClasses: "w-full",
	HelpText:     "The answer must match exactly (case insensitive).",
}

var passwordUnlockedContentTextarea = TextareaParams{
	Name:        "unlocked_content",
	Title:       "Unlocked Content",
	Placeholder: "Aye, you found the secret password! Here is your next clue...",
	Markdown:    true,
	Required:    false,
	HelpText:    "This content will be shown to the player when they answer correctly.",
}

templ passwordAdmin(settings models.InstanceSettings, block blocks.PasswordBlock) {
	<form
		id={ fmt.Sprintf("form-%s", block.ID) }
		hx-put={ fmt.Sprint("/admin/blocks/", block.ID) }
		hx-trigger={ fmt.Sprintf("keyup change from:(#form-%s textarea, #form-%s input) delay:1000ms", block.ID, block.ID) }
		hx-swap="none"
	>
		if settings.EnablePoints {
			@adminPointsField(block.GetPoints())
		}
		@TextareaField(passwordPromptTextarea.SetValue(block.Prompt))
		@TextInputField(passwordAnswerInput.SetValue(block.Answer))
		@TextareaField(passwordUnlockedContentTextarea.SetValue(block.UnlockedContent))
	</form>
}
