package blocks

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v4/blocks"
	"github.com/nathanhollows/Rapua/v4/models"
)

templ checklistPlayer(settings models.InstanceSettings, block blocks.ChecklistBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
	>
		if settings.EnablePoints && block.Points > 0 {
			<span class="indicator-item indicator-top indicator-center badge badge-info">{ fmt.Sprint(block.GetPoints()) } pts</span>
		}
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Content))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-target={ fmt.Sprintf("#player-block-%s", block.ID) }
				hx-trigger="change"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<div
					if data.IsComplete() {
						class="checklist w-full flex flex-col gap-1 text-success"
					} else {
						class="checklist w-full flex flex-col gap-1"
					}
				>
					for _, item := range block.List {
						<div class="form-control">
							<label class="label cursor-pointer flex gap-3 justify-start text-base-content">
								<input
									id={ fmt.Sprintf("checklist-%s-%s", block.ID, item.ID) }
									name="checklist-item-ids"
									type="checkbox"
									value={ item.ID }
									autoComplete="off"
									if data.IsComplete() {
										disabled
										class="checkbox checkbox-success"
									} else {
										class="checkbox checkbox-primary"
									}
									if item.IsChecked(data.GetPlayerData()) || data.IsComplete() {
										checked
									}
								/>
								<div class="checklist-label">
									@templ.Raw(stringToMarkdown(item.Description))
								</div>
							</label>
						</div>
					}
				</div>
			</form>
		</div>
	</div>
	<style>
		.checklist-label p {
			margin: 0;
		}
		.checklist-label strong {
			color: inherit;
		}
	</style>
}

var checklistInstructionsTextarea = TextareaParams{
	Name:        "content",
	Title:       "Instructions",
	Placeholder: "Brief instructions for the checklist.",
	Markdown:    true,
	Required:    true,
}

templ checklistAdmin(settings models.InstanceSettings, block blocks.ChecklistBlock) {
	<form
		id={ fmt.Sprintf("form-%s", block.ID) }
		hx-put={ fmt.Sprint("/admin/blocks/", block.ID) }
		hx-trigger={ fmt.Sprintf("keyup changed from:(#form-%s textarea) delay:500ms, click from:(#form-%s button) delay:100ms, keyup change from:(#form-%s input) delay:500ms", block.ID, block.ID, block.ID) }
		hx-swap="none"
	>
		if settings.EnablePoints {
			@adminPointsField(block.Points)
		}
		@TextareaField(checklistInstructionsTextarea.SetValue(block.Content))
		<fieldset class="fieldset">
			<legend class="fieldset-legend justify-start w-full">
				Checklist Items
				<button class="btn btn-outline btn-sm my-2 ml-auto" type="button" onclick="addChecklistItem(event)">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-list-plus w-5 h-5"><path d="M11 12H3"></path><path d="M16 6H3"></path><path d="M16 18H3"></path><path d="M18 9v6"></path><path d="M21 12h-6"></path></svg>
					Add Item
				</button>
			</legend>
			<div
				id="checklist-items"
				class="checklist-admin flex flex-col join join-vertical bg-base-100 w-full"
			>
				for _, item := range block.List {
					@checklistItem(item)
				}
				for i := 0; i < (2 - len(block.List)); i++ {
					@checklistItem(blocks.ChecklistItem{})
				}
			</div>
		</fieldset>
	</form>
	<script>

	function addChecklistItem(event) {
		event.preventDefault();
		const checklistContainer = document.getElementById('checklist-items');
		const newItem = document.createElement('label');
		newItem.classList.add('w-full', 'checklist-item', 'input', 'bg-transparent', 'flex', 'flex-row', 'items-start', 'gap-2', 'h-auto', 'join-item');

    newItem.innerHTML = `
        <textarea
            name="checklist-items"
            class="w-full textarea hover:border-0 hover:outline-0 focus:border-0 focus:outline-0 border-0 outline-0 pr-20 bg-transparent"
            rows="1"
            placeholder="Checklist item description..."
            autoComplete="off"
        ></textarea>
        <input type="hidden" name="checklist-item-ids" value="" />
        <div class="flex gap-1 mt-2">
			<button type="button" class="btn btn-xs btn-circle tooltip" data-tip="Move up" onclick="moveChecklistItemUp(event)">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-up w-3 h-3"><path d="M8 6L12 2L16 6"></path><path d="M12 2V22"></path></svg>

			</button>
			<button type="button" class="btn btn-xs btn-circle tooltip" data-tip="Move down" onclick="moveChecklistItemDown(event)">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-down w-3 h-3"><path d="M8 18L12 22L16 18"></path><path d="M12 2V22"></path></svg>
			</button>
            <button type="button" class="btn btn-xs btn-circle hover:btn-error tooltip flex" data-tip="Delete" onclick="removeChecklistItem(event)">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 w-3 h-3"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
            </button>
        </div>
    `;
    checklistContainer.appendChild(newItem);
}

function removeChecklistItem(event) {
	event.preventDefault();
	const item = event.target.closest('.checklist-item');
	item.remove();
}

function moveChecklistItemUp(event) {
    event.preventDefault();
    const item = event.target.closest('.checklist-item');
    const previousItem = item.previousElementSibling;
    if (previousItem && previousItem.classList.contains('checklist-item')) {
        item.parentNode.insertBefore(item, previousItem);
    }
}

function moveChecklistItemDown(event) {
    event.preventDefault();
    const item = event.target.closest('.checklist-item');
    const nextItem = item.nextElementSibling;
    if (nextItem && nextItem.classList.contains('checklist-item')) {
        item.parentNode.insertBefore(nextItem, item);
    }
}
</script>
}

templ checklistItem(item blocks.ChecklistItem) {
	<label class="w-full checklist-item input bg-transparent flex flex-row items-start gap-2 h-auto join-item" data-item-id={ item.ID }>
		<textarea
			name="checklist-items"
			class={ fmt.Sprintf("w-full textarea hover:border-0 hover:outline-0 focus:border-0 focus:outline-0 border-0 outline-0 bg-transparent item-%s", item.ID) }
			style="field-sizing: content;"
			rows="1"
			value={ item.Description }
			placeholder="Checklist item description..."
			autoComplete="off"
		>
			{ item.Description }
		</textarea>
		<input
			type="hidden"
			name="checklist-item-ids"
			value={ item.ID }
		/>
		<div class="flex gap-1 mt-2">
			<button type="button" class="btn btn-xs btn-circle tooltip" data-tip="Move up" onclick="moveChecklistItemUp(event)">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-up w-3 h-3"><path d="M8 6L12 2L16 6"></path><path d="M12 2V22"></path></svg>
			</button>
			<button type="button" class="btn btn-xs btn-circle tooltip" data-tip="Move down" onclick="moveChecklistItemDown(event)">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-down w-3 h-3"><path d="M8 18L12 22L16 18"></path><path d="M12 2V22"></path></svg>
			</button>
			<button type="button" class="btn btn-xs btn-circle hover:btn-error tooltip flex" data-tip="Delete" onclick="removeChecklistItem(event)">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 w-3 h-3"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
			</button>
		</div>
	</label>
}
