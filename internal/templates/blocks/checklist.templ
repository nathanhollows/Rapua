package blocks

import (
	"fmt"
	"github.com/nathanhollows/Rapua/blocks"
	internalModels "github.com/nathanhollows/Rapua/internal/models"
)

templ checklistPlayer(settings internalModels.InstanceSettings, block blocks.ChecklistBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("block-%s", block.ID) }
		class="indicator w-full"
	>
		if settings.EnablePoints && block.Points > 0 {
			<span class="indicator-item indicator-top indicator-center badge badge-info">{ fmt.Sprint(block.GetPoints()) } pts</span>
		}
		if data.IsComplete() {
			<span class="indicator-item indicator-top indicator-right badge badge-success mr-12">Complete</span>
		} else {
			<span class="indicator-item indicator-top indicator-right badge badge-primary mr-12">Incomplete</span>
		}
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Content))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-target={ fmt.Sprintf("#block-%s", block.ID) }
				hx-trigger="change"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<div
					if data.IsComplete() {
						class="checklist w-full flex flex-col gap-1 text-success"
					} else {
						class="checklist w-full flex flex-col gap-1"
					}
				>
					for _, item := range block.List {
						<div class="form-control">
							<label class="label cursor-pointer flex gap-3 justify-start items-start">
								<input
									id={ fmt.Sprintf("checklist-%s-%s", block.ID, item.ID) }
									name="checklist-item-ids"
									type="checkbox"
									value={ item.ID }
									autoComplete="off"
									if data.IsComplete() {
										disabled
										class="checkbox checkbox-success mt-1"
									} else {
										class="checkbox checkbox-primary mt-1"
									}
									if item.IsChecked(data.GetPlayerData()) || data.IsComplete() {
										checked
									}
								/>
								<div class="checklist-label">
									@templ.Raw(stringToMarkdown(item.Description))
								</div>
							</label>
						</div>
					}
				</div>
			</form>
		</div>
	</div>
	<style>
		.checklist-label p {
			margin: 0;
		}
		.checklist-label strong {
			color: inherit;
		}
	</style>
}

templ checklistAdmin(settings internalModels.InstanceSettings, block blocks.ChecklistBlock) {
	<form
		hx-post={ fmt.Sprint("/admin/locations/", block.LocationID, "/blocks/", block.ID, "/update") }
		class="modal-box md:w-11/12 max-w-5xl"
	>
		<h3 class="text-lg font-bold flex flex-row gap-3">
			@templ.Raw(block.GetIconSVG())
			Updating { block.GetName() } block
		</h3>
		if settings.EnablePoints {
			<label class="form-control w-full">
				<div class="label">
					<span class="label-text font-bold">Points</span>
				</div>
				<label class="input input-bordered flex items-center gap-2">
					<input name="points" type="number" class="grow" placeholder="Search" value={ fmt.Sprint(block.Points) }/>
					<span class="badge badge-info tooltip tooltip-left" data-tip="Set to 0 to disable">Optional</span>
				</label>
			</label>
		}
		<label
			for={ fmt.Sprintf("md-%s", block.ID) }
			class="form-control w-full my-5"
		>
			<div class="label">
				<span class="label-text font-bold">Instructions</span>
				<label class="label-text-alt flex flex-row gap-3">
					Preview
					<input
						type="checkbox"
						class="toggle toggle-sm md-toggle"
						name="preview"
						class="checkbox"
						data-block={ block.ID }
						onclick="previewMD(event)"
					/>
				</label>
			</div>
			<textarea
				id={ fmt.Sprintf("md-%s", block.ID) }
				name="content"
				rows="4"
				class="textarea textarea-bordered w-full font-mono"
				placeholder="Markdown content here..."
			>{ block.Content }</textarea>
			<div
				id={ fmt.Sprintf("preview-md-%s", block.ID) }
				class="flex items-center justify-center min-h-48 border border-base-300 hidden card w-full bg-base-200 rounded-[var(--rounded-btn)] p-5"
			></div>
			<div class="label">
				<span class="label-text-alt flex flex-row content-center gap-1">
					<span class="self-center">
						This block uses Markdown for formatting content. <a class="link" href="/admin/markdown" target="blank">Here's a quick guide</a>.
					</span>
				</span>
			</div>
		</label>
		<div class="form-control w-full my-5">
			<label class="label font-bold">Checklist Items</label>
			<div class="checklist-admin" id="checklist-items">
				<button class="btn btn-outline btn-sm mt-2" type="button" onclick="addChecklistItem(event)">
					Add Item
				</button>
				for _, item := range block.List {
					<div class="join checklist-item my-2 flex items-center" data-item-id={ item.ID }>
						<input
							type="text"
							name="checklist-items"
							class="input input-bordered w-full join-item"
							value={ item.Description }
							placeholder="Checklist item description..."
						/>
						<input
							type="hidden"
							name="checklist-item-ids"
							value={ item.ID }
						/>
						<button type="button" class="btn join-item" onclick="removeChecklistItem(event)">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 w-4 h-4"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
						</button>
						<button type="button" class="btn join-item" onclick="moveChecklistItemUp(event)">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-up w-4 h-4"><path d="M8 6L12 2L16 6"></path><path d="M12 2V22"></path></svg>
						</button>
						<button type="button" class="btn join-item" onclick="moveChecklistItemDown(event)">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-down w-4 h-4"><path d="M8 18L12 22L16 18"></path><path d="M12 2V22"></path></svg>
						</button>
					</div>
				}
			</div>
		</div>
		<div class="modal-action">
			<button
				type="button"
				class="btn"
				onclick="block_edit_modal.close()"
			>Nevermind</button>
			<button
				type="submit"
				class="btn btn-primary"
				onclick="block_edit_modal.close()"
			>Save</button>
		</div>
	</form>
	<script>
function addChecklistItem(event) {
    event.preventDefault();
    const checklistContainer = document.getElementById('checklist-items');
    const newItem = document.createElement('div');
    newItem.classList.add('checklist-item', 'my-2', 'flex', 'items-center', 'gap-2');
    newItem.innerHTML = `
        <label class="input-group w-full">
            <input
                type="text"
                name="checklist-items"
                class="input input-bordered w-full"
                placeholder="Checklist item description..."
            />
        </label>
		<input type="hidden" name="checklist-item-ids" value="" />
        <button type="button" class="btn btn-outline" onclick="removeChecklistItem(event)">Remove</button>
        <button type="button" class="btn btn-outline" onclick="moveChecklistItemUp(event)">↑</button>
        <button type="button" class="btn btn-outline" onclick="moveChecklistItemDown(event)">↓</button>
    `;
    checklistContainer.appendChild(newItem);
}

function removeChecklistItem(event) {
    event.preventDefault();
    const item = event.target.closest('.checklist-item');
    item.remove();
}

function moveChecklistItemUp(event) {
    event.preventDefault();
    const item = event.target.closest('.checklist-item');
    const previousItem = item.previousElementSibling;
    if (previousItem && previousItem.classList.contains('checklist-item')) {
        item.parentNode.insertBefore(item, previousItem);
    }
}

function moveChecklistItemDown(event) {
    event.preventDefault();
    const item = event.target.closest('.checklist-item');
    const nextItem = item.nextElementSibling;
    if (nextItem && nextItem.classList.contains('checklist-item')) {
        item.parentNode.insertBefore(nextItem, item);
    }
}
</script>
}
