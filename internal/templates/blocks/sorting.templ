package blocks

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/nathanhollows/Rapua/v4/blocks"
	"github.com/nathanhollows/Rapua/v4/models"
	"io"
)

// Helper function to unmarshal player data
func getPlayerData(rawData json.RawMessage) (blocks.SortingPlayerData, error) {
	var playerData blocks.SortingPlayerData
	if rawData != nil {
		err := json.Unmarshal(rawData, &playerData)
		return playerData, err
	}
	return playerData, nil
}

// Helper function to check if attempts > 0
func hasAttempts(playerData blocks.SortingPlayerData) bool {
	return playerData.Attempts > 0
}

// Helper function to get display order
func getDisplayOrder(playerData blocks.SortingPlayerData) []string {
	if len(playerData.PlayerOrder) > 0 {
		return playerData.PlayerOrder
	}
	return playerData.ShuffleOrder
}

// Helper function to extract item positions for showing answers
func getItemPositions(block blocks.SortingBlock) map[string]int {
	positions := make(map[string]int)
	for _, item := range block.Items {
		positions[item.ID] = item.Position
	}
	return positions
}

// Helper function to check if an item is in the correct position
func isItemInCorrectPosition(itemID string, position int, positions map[string]int) bool {
	correctPos, exists := positions[itemID]
	return exists && correctPos == position
}

// Helper function to render sorting items
func renderItems(block blocks.SortingBlock, data blocks.PlayerState) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		playerData, err := getPlayerData(data.GetPlayerData())
		isComplete := data.IsComplete()
		positions := getItemPositions(block)

		// Determine which items to show and in what order
		if err == nil && len(playerData.ShuffleOrder) > 0 {
			// Create a map for quick item lookup
			itemMap := make(map[string]blocks.SortingItem)
			for _, item := range block.Items {
				itemMap[item.ID] = item
			}

			// Use player's order if available, otherwise use shuffle order
			displayOrder := getDisplayOrder(playerData)

			// Render each item in the display order
			for i, itemID := range displayOrder {
				if item, ok := itemMap[itemID]; ok {
					if isComplete {
						// For completed blocks, add position indicators
						currentPosition := i + 1
						isCorrect := isItemInCorrectPosition(itemID, currentPosition, positions)

						// Render item with position indicators
						err := sortItemWithPosition(item, currentPosition, isCorrect).Render(ctx, w)
						if err != nil {
							return err
						}
					} else {
						// Regular sortable item
						err := sortItem(item).Render(ctx, w)
						if err != nil {
							return err
						}
					}
				}
			}
		} else {
			// First time viewing, use the shuffle order if it exists
			itemsToShow := make([]blocks.SortingItem, 0, len(block.Items))

			if len(playerData.ShuffleOrder) > 0 {
				// Use the existing shuffle order
				itemMap := make(map[string]blocks.SortingItem)
				for _, item := range block.Items {
					itemMap[item.ID] = item
				}

				for _, itemID := range playerData.ShuffleOrder {
					if item, ok := itemMap[itemID]; ok {
						itemsToShow = append(itemsToShow, item)
					}
				}
			} else {
				// Generate a deterministic shuffle for first-time viewing
				itemIDs := make([]string, len(block.Items))
				itemMap := make(map[string]blocks.SortingItem)

				for i, item := range block.Items {
					itemIDs[i] = item.ID
					itemMap[item.ID] = item
				}

				// Use deterministic shuffle based on blockID and playerID
				shuffledIDs := deterministicShuffle(itemIDs, block.GetID()+data.GetPlayerID())

				for _, id := range shuffledIDs {
					if item, ok := itemMap[id]; ok {
						itemsToShow = append(itemsToShow, item)
					}
				}
			}

			// Render the items
			for _, item := range itemsToShow {
				err := sortItem(item).Render(ctx, w)
				if err != nil {
					return err
				}
			}
		}

		return nil
	})
}

// Helper function for deterministic shuffle in templates
func deterministicShuffle(items []string, seed string) []string {
	// Create a copy of the items
	result := make([]string, len(items))
	copy(result, items)

	// Use a simple deterministic shuffle algorithm (not the same as the Go version but works for templates)
	seedSum := 0
	for _, c := range seed {
		seedSum += int(c)
	}

	// Fisher-Yates style shuffle with fixed seed
	for i := len(result) - 1; i > 0; i-- {
		j := (i * seedSum) % (i + 1)
		result[i], result[j] = result[j], result[i]
	}

	return result
}

templ sortingPlayer(settings models.InstanceSettings, block blocks.SortingBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
	>
		if settings.EnablePoints && block.Points > 0 {
			<span class="indicator-item indicator-top indicator-center badge badge-info">{ fmt.Sprint(block.GetPoints()) } pts</span>
		}
		@completionBadge(data)
		<div class="card bg-base-200 shadow-lg w-full">
			<div class="prose p-5 pb-3">
				if block.Content == "" {
					<h2>Sortable</h2>
					<p>Sort the items below in the correct order.</p>
				} else {
					@templ.Raw(stringToMarkdown(block.Content))
				}
			</div>
			<form
				id={ fmt.Sprintf("sorting-form-%s", block.ID) }
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-target={ fmt.Sprintf("#player-block-%s", block.ID) }
				class="pb-4"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<div
					id={ fmt.Sprintf("sorting-items-%s", block.ID) }
					class="sort-container mt-4 join join-vertical w-full rounded-none"
				>
					@renderItems(block, data)
				</div>
				if block.ScoringScheme == blocks.RetryUntilCorrect {
					// Get player data to check attempts
					if playerData, err := getPlayerData(data.GetPlayerData()); err == nil && playerData.Attempts > 0 && !playerData.IsCorrect {
						<p class="p-4 pb-0 text-primary font-bold text-center">Not quite! Try again (Attempts: { fmt.Sprint(playerData.Attempts) })</p>
					}
				}
				if !data.IsComplete() {
					<div class="flex justify-center mt-4">
						<button class="btn btn-primary btn-wide">
							if block.ScoringScheme == blocks.RetryUntilCorrect {
								Check
							} else {
								Submit
							}
							<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal-icon lucide-send-horizontal w-5 h-5"><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16"></path></svg>
						</button>
					</div>
				}
			</form>
		</div>
	</div>
	@SortingJS()
	<script>
		// Initialize sortable functionality on the sort container
		document.addEventListener('DOMContentLoaded', function() {
			const sortContainer = document.getElementById('{ fmt.Sprintf("sorting-items-%s", block.ID) }');
			const form = document.getElementById('{ fmt.Sprintf("sorting-form-%s", block.ID) }');
			
			if (sortContainer && form && !{ fmt.Sprint(data.IsComplete()) }) {
				// Initialize Sortable for drag and drop
				new Sortable(sortContainer, {
					animation: 150,
					ghostClass: 'sortable-ghost',
					chosenClass: 'sortable-chosen',
					dragClass: 'sortable-drag',
					onEnd: function() {
						// When sorting ends, update the hidden inputs to reflect new order
						updateSortingOrder(sortContainer, form);
					}
				});
				
				// Set up the up/down buttons to move items
				sortContainer.querySelectorAll('.join-vertical button').forEach(btn => {
					btn.addEventListener('click', function(e) {
						e.preventDefault();
						const item = e.target.closest('.sorting-item');
						const isUp = e.target.closest('button').getAttribute('data-tip') === 'Move up';
						
						if (isUp) {
							const prev = item.previousElementSibling;
							if (prev) {
								sortContainer.insertBefore(item, prev);
							}
						} else {
							const next = item.nextElementSibling;
							if (next) {
								sortContainer.insertBefore(next, item);
							}
						}
						
						// Update the form data after moving
						updateSortingOrder(sortContainer, form);
					});
				});
				
				// Add a submit handler to make sure the form has the current order
				form.addEventListener('submit', function(e) {
					updateSortingOrder(sortContainer, form);
				});
			}
		});
		
		// Function to update the sorting-item-order hidden inputs
		function updateSortingOrder(container, form) {
			console.log("Updating sort order...");
			
			// Get current order of items
			const items = container.querySelectorAll('.sorting-item');
			console.log("Found " + items.length + " items");
			
			// First remove all existing order inputs to avoid duplicates
			form.querySelectorAll('input[name="sorting-item-order"]').forEach(input => {
				console.log("Removing existing input: " + input.value);
				input.remove();
			});
			
			// Add fresh inputs in the current order
			items.forEach((item, index) => {
				const itemId = item.getAttribute('data-id');
				console.log("Item " + (index+1) + ": " + itemId);
				
				// Always create a new input
				const input = document.createElement('input');
				input.type = 'hidden';
				input.name = 'sorting-item-order';
				input.value = itemId;
				form.appendChild(input);
			});
		}
	</script>
}

templ sortItem(item blocks.SortingItem) {
	<div
		id={ fmt.Sprintf("sort-item-%s", item.ID) }
		class="sorting-item join-item border border-x-0 border-base-300 flex justify-between items-center px-4 py-2 cursor-grab"
		data-id={ item.ID }
		data-correct-position={ fmt.Sprint(item.Position) }
	>
		<input type="hidden" name="sorting-item-order" value={ item.ID }/>
		<div class="flex-grow">
			@templ.Raw(stringToMarkdown(item.Description))
		</div>
		<div class="flex flex-shrink-0 ml-2">
			<span class="join join-vertical">
				<button
					type="button"
					class="btn btn-xs btn-ghost join-item tooltip tooltip-left"
					data-tip="Move up"
					onclick="moveSortingItemUp(event)"
				>
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>
				</button>
				<button
					type="button"
					class="btn btn-xs btn-ghost join-item tooltip tooltip-left"
					data-tip="Move down"
					onclick="moveSortingItemDown(event)"
				>
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>
				</button>
			</span>
		</div>
	</div>
}

// Template for an item with position indicators for completed blocks
templ sortItemWithPosition(item blocks.SortingItem, currentPosition int, isCorrect bool) {
	if isCorrect {
		<div
			id={ fmt.Sprintf("sort-item-%s", item.ID) }
			class="sorting-item join-item border border-x-0 border-base-300 flex justify-between items-center px-4 py-2"
			data-id={ item.ID }
		>
			<div class="flex flex-grow gap-2">
				<span class="badge badge-lg badge-success rounded-full">
					{ fmt.Sprint(item.Position) }
				</span>
				@templ.Raw(stringToMarkdown(item.Description))
			</div>
			<div class="flex flex-shrink-0 ml-2 invisible">
				<span class="join join-vertical">
					<button
						type="button"
						class="btn btn-xs btn-ghost join-item tooltip tooltip-left"
						data-tip="Move up"
						onclick="moveSortingItemUp(event)"
					>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>
					</button>
					<button
						type="button"
						class="btn btn-xs btn-ghost join-item tooltip tooltip-left"
						data-tip="Move down"
						onclick="moveSortingItemDown(event)"
					>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>
					</button>
				</span>
			</div>
		</div>
	} else {
		<div
			id={ fmt.Sprintf("sort-item-%s", item.ID) }
			class="sorting-item join-item border border-x-0 border-base-300 flex justify-between items-center px-4 py-2"
			data-id={ item.ID }
		>
			<div class="flex flex-grow gap-2">
				<span class="badge badge-lg badge-error rounded-full">
					{ fmt.Sprint(item.Position) }
				</span>
				@templ.Raw(stringToMarkdown(item.Description))
			</div>
			<div class="flex flex-shrink-0 ml-2 invisible">
				<span class="join join-vertical">
					<button
						type="button"
						class="btn btn-xs btn-ghost join-item tooltip tooltip-left"
						data-tip="Move up"
						onclick="moveSortingItemUp(event)"
					>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>
					</button>
					<button
						type="button"
						class="btn btn-xs btn-ghost join-item tooltip tooltip-left"
						data-tip="Move down"
						onclick="moveSortingItemDown(event)"
					>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>
					</button>
				</span>
			</div>
		</div>
	}
}

templ sortingAdmin(settings models.InstanceSettings, block blocks.SortingBlock) {
	<form
		id={ fmt.Sprintf("form-%s", block.ID) }
		hx-post={ fmt.Sprint("/admin/locations/", block.LocationID, "/blocks/", block.ID, "/update") }
		hx-trigger={ fmt.Sprintf("keyup changed from:(#form-%s textarea) delay:500ms, click from:(#form-%s button) delay:100ms, keyup change from:(#form-%s input) delay:500ms, change from:(#form-%s select) delay:100ms, save delay:500ms", block.ID, block.ID, block.ID, block.ID) }
		hx-swap="none"
	>
		if settings.EnablePoints {
			<label class="form-control w-full">
				<div class="label">
					<span class="label-text font-bold">Points</span>
				</div>
				<label class="input flex items-center gap-2">
					<input name="points" type="number" class="grow" placeholder="Points" value={ fmt.Sprint(block.Points) }/>
					<span class="badge badge-info tooltip tooltip-left" data-tip="Set to 0 to disable">Optional</span>
				</label>
			</label>
		}
		<label class="form-control w-full mt-5">
			<div class="label">
				<span class="label-text font-bold">Scoring Scheme</span>
			</div>
			<select name="scoring_scheme" class="select w-full">
				<option value="all_or_nothing" selected?={ block.ScoringScheme == "all_or_nothing" }>All or Nothing</option>
				<option value="correct_item_correct_place" selected?={ block.ScoringScheme == "correct_item_correct_place" }>Correct Item, Correct Place</option>
				<option value="retry_until_correct" selected?={ block.ScoringScheme == "retry_until_correct" }>Retry Until Correct</option>
			</select>
			<div class="label">
				<span class="label-text-alt">
					Choose how points will be awarded:
					<ul class="mt-1 list-disc list-inside text-xs">
						<li><strong>All or Nothing</strong>: One attempt only, full points or zero</li>
						<li><strong>Correct Item, Correct Place</strong>: Points for each correctly placed item</li>
						<li><strong>Retry Until Correct</strong>: Multiple attempts allowed until correct</li>
					</ul>
				</span>
			</div>
		</label>
		// No scoring percentage needed
		<label
			for={ fmt.Sprintf("md-%s", block.ID) }
			class="form-control w-full mt-5"
		>
			<div class="label">
				<span class="label-text font-bold">Instructions</span>
			</div>
			<textarea
				id={ fmt.Sprintf("md-%s", block.ID) }
				name="content"
				rows="2"
				class="markdown-textarea textarea w-full font-mono pt-3"
				style="field-sizing: content;"
				placeholder="## Sortable
Sort the items below in the correct order."
			></textarea>
		</label>
		<div class="form-control w-full">
			<div class="label font-bold flex justify-between">
				<span class="label-text">Sorting Items</span>
				<button
					class="btn btn-outline btn-xs"
					type="button"
					_="
						on click
							set :group to closest <form />
							put #sorting-item-template's innerHTML after last .sorting-item in :group.querySelector('.sorting-items')
						"
				>
					Add Item
				</button>
			</div>
			<div
				class="sorting-items join join-vertical"
				_="on load or click from me.querySelectorAll('button') or click from previous <button /> or triggerUpdate
				if my children's length > 2
					remove .invisible from me.querySelectorAll('.btn-circle')
				else
					add .invisible to me.querySelectorAll('.btn-circle')
				end
				"
			>
				for _, item := range block.Items {
					@sortingItem(item)
				}
				for i := 0; i < (2 - len(block.Items)); i++ {
					@sortingItem(blocks.SortingItem{})
				}
			</div>
		</div>
		<template id="sorting-item-template">
			<label class="sorting-item input bg-transparent flex flex-row items-top gap-2 h-auto join-item">
				<textarea
					name="sorting-items"
					class="w-full textarea hover:border-0 hover:outline-0 focus:border-0 focus:outline-0 border-0 outline-0 pr-20 bg-transparent"
					style="field-sizing: content;"
					rows="1"
					placeholder="Sorting item description..."
					autoComplete="off"
					_="on keyup send save to (closest <form/>)"
				></textarea>
				<input
					type="hidden"
					name="sorting-item-ids"
					value=""
				/>
				<div class="flex gap-1 mt-2">
					<span class="join join-horizontal">
						<button
							type="button"
							class="btn btn-xs join-item tooltip"
							data-tip="Move up"
							_="on click
								set item to closest parent <label/>
								set prev to item.previousElementSibling
								if prev then
									put item before prev
								end
								send save to closest <form/>
								send triggerUpdate to (closest <form/>).querySelector('.sorting-items')
							"
						>
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-up w-3 h-3"><path d="M8 6L12 2L16 6"></path><path d="M12 2V22"></path></svg>
						</button>
						<button
							type="button"
							class="btn btn-xs join-item tooltip"
							data-tip="Move down"
							_="on click
								set item to closest parent <label/>
								set next to item.nextElementSibling
								if next then
									put item after next
								end
								send save to closest <form/>
								send triggerUpdate to (closest <form/>).querySelector('.sorting-items')
							"
						>
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-down w-3 h-3"><path d="M8 18L12 22L16 18"></path><path d="M12 2V22"></path></svg>
						</button>
					</span>
					<button
						type="button"
						class="btn btn-xs btn-circle hover:btn-error tooltip flex invisible"
						data-tip="Delete"
						_="on click
					set :group to closest <form />
					remove closest parent <label />
					send save to :group
					send triggerUpdate to :group.querySelector('.sorting-items')
					"
					>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 w-3 h-3"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
					</button>
				</div>
			</label>
		</template>
	</form>
	@SortingJS()
}

templ SortingJS() {
	<script>
	</script>
}

templ sortingItem(item blocks.SortingItem) {
	<label class="sorting-item input bg-transparent flex flex-row items-top gap-2 h-auto join-item" data-item-id={ item.ID }>
		<textarea
			name="sorting-items"
			class={ fmt.Sprintf("w-full textarea hover:border-0 hover:outline-0 focus:border-0 focus:outline-0 border-0 outline-0 pr-20 bg-transparent item-%s", item.ID) }
			_="on keyup send save to (closest <form/>)"
			style="field-sizing: content;"
			rows="1"
			value={ item.Description }
			placeholder="Sorting item description..."
			autoComplete="off"
		>
			{ item.Description }
		</textarea>
		<input
			type="hidden"
			name="sorting-item-ids"
			value={ item.ID }
		/>
		<div class="flex gap-1 mt-2">
			<span class="join join-horizontal">
				<button
					type="button"
					class="btn btn-xs join-item tooltip"
					data-tip="Move up"
					_="on click
						set :item to closest parent <label/>
						set :prev to :item.previousElementSibling
						if :prev then
							put :item before :prev
						end
						send save to closest <form/>
					"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-up w-3 h-3"><path d="M8 6L12 2L16 6"></path><path d="M12 2V22"></path></svg>
				</button>
				<button
					type="button"
					class="btn btn-xs join-item tooltip"
					data-tip="Move down"
					_="on click
						set :item to closest parent <label/>
						set :next to :item.nextElementSibling
						if :next then
							put :item after :next
						end
						send save to closest <form/>
					"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-down w-3 h-3"><path d="M8 18L12 22L16 18"></path><path d="M12 2V22"></path></svg>
				</button>
			</span>
			<button
				type="button"
				class="btn btn-xs btn-circle hover:btn-error tooltip flex invisible"
				data-tip="Delete"
				_="on click
				set :group to closest <form />
				remove closest parent <label />
				send save to :group
				send triggerUpdate to :group.querySelector('.sorting-items')
				"
			>
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 w-3 h-3"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
			</button>
		</div>
	</label>
}
