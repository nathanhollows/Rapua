package blocks

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v3/blocks"
	"github.com/nathanhollows/Rapua/v3/models"
)

func RenderAdminEdit(settings models.InstanceSettings, block blocks.Block) templ.Component {
	switch block.GetType() {
	case "markdown":
		b := block.(*blocks.MarkdownBlock)
		return markdownAdmin(settings, *b)
	case "divider":
		b := block.(*blocks.DividerBlock)
		return dividerAdmin(settings, *b)
	case "image":
		b := block.(*blocks.ImageBlock)
		return imageAdmin(settings, *b)
	case "answer":
		b := block.(*blocks.AnswerBlock)
		return answerAdmin(settings, *b)
	case "pincode":
		b := block.(*blocks.PincodeBlock)
		return pincodeAdmin(settings, *b)
	case "checklist":
		b := block.(*blocks.ChecklistBlock)
		return checklistAdmin(settings, *b)
	case "youtube":
		b := block.(*blocks.YoutubeBlock)
		return youtubeAdmin(settings, *b)
	case "alert":
		b := block.(*blocks.AlertBlock)
		return alertAdmin(settings, *b)
	case "sorting":
		b := block.(*blocks.SortingBlock)
		return sortingAdmin(settings, *b)
	case "photo":
		b := block.(*blocks.PhotoBlock)
		return photoAdmin(settings, *b)
	}
	return nil
}

func RenderPlayerView(settings models.InstanceSettings, block blocks.Block, state blocks.PlayerState) templ.Component {
	switch block.GetType() {
	case "markdown":
		b := block.(*blocks.MarkdownBlock)
		return markdownPlayer(settings, *b)
	case "divider":
		b := block.(*blocks.DividerBlock)
		return dividerPlayer(settings, *b)
	case "image":
		b := block.(*blocks.ImageBlock)
		return imagePlayer(settings, *b)
	case "answer":
		b := block.(*blocks.AnswerBlock)
		return answerPlayer(settings, *b, state)
	case "pincode":
		b := block.(*blocks.PincodeBlock)
		return pincodePlayer(settings, *b, state)
	case "checklist":
		b := block.(*blocks.ChecklistBlock)
		return checklistPlayer(settings, *b, state)
	case "youtube":
		b := block.(*blocks.YoutubeBlock)
		return youtubePlayer(settings, *b)
	case "alert":
		b := block.(*blocks.AlertBlock)
		return alertPlayer(settings, *b)
	case "sorting":
		b := block.(*blocks.SortingBlock)
		return sortingPlayer(settings, *b, state)
	case "photo":
		b := block.(*blocks.PhotoBlock)
		return photoPlayer(settings, *b, state)
	}
	return nil
}

func RenderPlayerUpdate(settings models.InstanceSettings, block blocks.Block, state blocks.PlayerState) templ.Component {
	switch block.GetType() {
	case "markdown":
		b := block.(*blocks.MarkdownBlock)
		return markdownPlayer(settings, *b)
	case "divider":
		b := block.(*blocks.DividerBlock)
		return dividerPlayer(settings, *b)
	case "image":
		b := block.(*blocks.ImageBlock)
		return imagePlayer(settings, *b)
	case "answer":
		b := block.(*blocks.AnswerBlock)
		return answerPlayerUpdate(settings, *b, state)
	case "pincode":
		b := block.(*blocks.PincodeBlock)
		return pincodePlayerUpdate(settings, *b, state)
	case "checklist":
		b := block.(*blocks.ChecklistBlock)
		return checklistPlayer(settings, *b, state)
	case "youtube":
		b := block.(*blocks.YoutubeBlock)
		return youtubePlayer(settings, *b)
	case "alert":
		b := block.(*blocks.AlertBlock)
		return alertPlayer(settings, *b)
	case "sorting":
		b := block.(*blocks.SortingBlock)
		return sortingPlayer(settings, *b, state)
	case "photo":
		b := block.(*blocks.PhotoBlock)
		return photoPlayerUpdate(settings, *b, state)
	}
	return nil
}

templ RenderAdminError() {
}

templ RenderAdminBlock(settings models.InstanceSettings, block blocks.Block, open bool) {
	<div
		id={ fmt.Sprint("block-", block.GetID()) }
		class="overflow-visible collapse collapse-arrow content-block card card-compact rounded-2xl bg-base-200"
		tabindex="0"
		data-block-id={ block.GetID() }
	>
		<input
			type="checkbox"
			if open {
				checked
			}
		/>
		<div class="flex flex-row collapse-title">
			<div class="flex flex-1 flex-row gap-5">
				<h3 class="text-lg font-bold flex flex-row gap-3 items-center">
					<span class="">
						@templ.Raw(block.GetIconSVG())
					</span>
					{ block.GetName() }
					if settings.EnablePoints && block.RequiresValidation() {
						<span class="badge badge-sm">{ fmt.Sprint(block.GetPoints()) } pts</span>
					}
					<span class="loading loading-dots loading-md htmx-indicator"></span>
				</h3>
			</div>
			<div class="flex gap-3 z-10">
				<button
					type="button"
					class="block-delete btn btn-sm btn-circle shadow-none hover:btn-error tooltip flex"
					data-tip="Delete"
					data-location={ block.GetLocationID() }
					data-block={ block.GetID() }
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 w-3 h-3"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
				</button>
				<span class="join join-horizontal">
					<button
						type="button"
						class="btn btn-sm btn-ghost join-item tooltip move-up-btn"
						data-tip="Move up"
						onclick="moveblock(event, 'up')"
						hx-post={ fmt.Sprint("/admin/locations/", block.GetLocationID(), "/blocks/reorder") }
						hx-trigger="click delay:400ms"
						hx-swap="none"
						hx-include="[name=block_id]"
						:disabled="{ block.IsFirst() }"
					>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-up w-3 h-3"><path d="M8 6L12 2L16 6"></path><path d="M12 2V22"></path></svg>
					</button>
					<button
						type="button"
						class="btn btn-sm btn-ghost join-item tooltip move-down-btn"
						data-tip="Move down"
						onclick="moveblock(event, 'down')"
						hx-post={ fmt.Sprint("/admin/locations/", block.GetLocationID(), "/blocks/reorder") }
						hx-trigger="click delay:400ms"
						hx-swap="none"
						hx-include="[name=block_id]"
					>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-down w-3 h-3"><path d="M8 18L12 22L16 18"></path><path d="M12 2V22"></path></svg>
					</button>
				</span>
			</div>
			<input type="hidden" name="block_id" value={ block.GetID() }/>
		</div>
		<div class="collapse-content">
			@RenderAdminEdit(settings, block)
		</div>
	</div>
}

templ markdownHint() {
	<span class="label-text-alt flex flex-row content-center gap-1 text-base-content/80">
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info w-5 h-5"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
		<span class="self-center">
			This block uses Markdown for formatting content. <a class="link" href="/docs/user/markdown-guide" target="blank">Here's a quick guide</a>.
		</span>
	</span>
}

templ completionBadge(data blocks.PlayerState) {
	if data.IsComplete() {
		<span class="indicator-item indicator-top indicator-right badge badge-success mr-12">Complete</span>
	} else {
		<span class="indicator-item indicator-top indicator-right badge mr-12">Incomplete</span>
	}
}
