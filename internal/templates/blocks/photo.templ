package blocks

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v5/blocks"
	"github.com/nathanhollows/Rapua/v5/models"
)

templ photoPlayer(settings models.InstanceSettings, block blocks.PhotoBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
	>
		@pointsBadge(settings.EnablePoints, block.GetPoints())
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Prompt))
			<form
				id="photoForm"
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-swap="none"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<label
					for={ fmt.Sprintf("photo-%s", block.ID) }
					class="form-control w-full"
				>
					if data.IsComplete() {
						<p class="label-text font-bold text-success">
							You got it!
						</p>
					} else {
						<form id="photoForm" hx-post="/submit" hx-trigger="submit" class="space-y-6">
							<div class="form-control">
								<label id="uploadButton" for="fileInput" class="btn btn-primary w-full cursor-pointer">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-camera w-5 h-5"><path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"></path><circle cx="12" cy="13" r="3"></circle></svg>
									Upload Photo
								</label>
								<input type="file" id="fileInput" class="hidden" accept="image/*"/>
							</div>
							<div id="previewContainer" class="hidden flex flex-col items-center gap-4 mt-0">
								<img id="imagePreview" alt="Preview" class="rounded-lg max-w-full m-auto"/>
								<progress id="progressBar" class="progress progress-primary w-full" value="0" max="100"></progress>
								<div class="grid grid-cols-2 gap-4 w-full hidden" id="actionButtons">
									<label for="fileInput" class="btn btn-secondary w-full">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-undo w-5 h-5"><path d="M3 7v6h6"></path><path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13"></path></svg>
										Retry
									</label>
									<button id="submitButton" type="submit" class="btn btn-primary w-full">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check w-5 h-5"><path d="M20 6 9 17l-5-5"></path></svg>
										Submit
									</button>
								</div>
							</div>
						</form>
						<script>
                        (function() {
                            const fileInput = document.getElementById('fileInput');
                            const previewContainer = document.getElementById('previewContainer');
                            const imagePreview = document.getElementById('imagePreview');
                            const progressBar = document.getElementById('progressBar');
                            const submitButton = document.getElementById('submitButton');
                            const uploadButton = document.getElementById('uploadButton');
                            const actionButtons = document.getElementById('actionButtons');
                            const form = document.getElementById('photoForm');

                            fileInput.addEventListener('change', async function(event) {
                                const file = event.target.files[0];
                                if (!file) return;

                                const reader = new FileReader();
                                reader.onload = function(e) {
                                    imagePreview.src = e.target.result;
                                    previewContainer.classList.remove('hidden');
                                    uploadButton.classList.add('hidden');
                                };
                                reader.readAsDataURL(file);

                                const formData = new FormData();
                                formData.append('file', file);

                                try {
                                    const uploadUrl = await uploadFile(formData);
                                    progressBar.classList.add('hidden');
                                    actionButtons.classList.remove('hidden');

                                    const hiddenInput = document.createElement('input');
                                    hiddenInput.type = 'hidden';
                                    hiddenInput.name = 'uploadedImageUrl';
                                    hiddenInput.value = uploadUrl;
                                    form.appendChild(hiddenInput);
                                } catch (error) {
                                    progressBar.classList.add('hidden');
                                    actionButtons.classList.remove('hidden');
                                    submitButton.classList.add('hidden');
                                    console.error(error);
                                }
                            });

                            async function uploadFile(formData) {
                                return new Promise((resolve, reject) => {
                                    const xhr = new XMLHttpRequest();
                                    xhr.open('POST', '/upload/image', true);

                                    xhr.upload.addEventListener('progress', function(e) {
                                        if (e.lengthComputable) {
                                            const percentComplete = (e.loaded / e.total) * 100;
                                            progressBar.value = percentComplete;
                                        }
                                    });

                                    xhr.onload = function() {
                                        if (xhr.status === 200) {
                                            resolve(JSON.parse(xhr.responseText).url);
                                        } else {
                                            reject(new Error('Upload failed'));
                                        }
                                    };

                                    xhr.onerror = function() {
                                        reject(new Error('Upload error'));
                                    };

                                    xhr.send(formData);
                                });
                            }
                        })();
                    </script>
						<div class="join w-full hidden">
							<input
								id={ fmt.Sprintf("photo-%s", block.ID) }
								name="photo"
								type="text"
								placeholder="Photo"
								class="input input-primary join-item w-full max-w-xs"
								autoComplete="off"
								required
							/>
						</div>
					}
				</label>
			</form>
		</div>
	</div>
}

templ photoPlayerUpdate(settings models.InstanceSettings, block blocks.PhotoBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
		hx-swap-oob="true"
	>
		if settings.EnablePoints && block.Points > 0 {
			<span class="indicator-item indicator-top indicator-center badge badge-info">{ fmt.Sprint(block.GetPoints()) } pts</span>
		}
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Prompt))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-swap="none"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<label
					for={ fmt.Sprintf("photo-%s", block.ID) }
					class="form-control w-full"
				>
					if data.IsComplete() {
						<p class="label-text font-bold text-success">
							You got it!
						</p>
					} else {
						<div class="join w-full animate-[wobble_1s_ease-in-out]">
							<input
								id={ fmt.Sprintf("photo-%s", block.ID) }
								name="photo"
								type="text"
								placeholder="Photo"
								class="input input-primary join-item w-full max-w-xs"
								autoComplete="off"
								required
							/>
							<button
								class="btn btn-primary btn-outline join-item rounded-r-full"
							>
								Check
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal w-4 h-5"><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16"></path></svg>
							</button>
						</div>
					}
				</label>
			</form>
		</div>
	</div>
}

var photoTextarea = TextareaParams{
	Name:        "prompt",
	Title:       "Prompt",
	Placeholder: "Take a photo of your team posing in front of the landmark.",
	Markdown:    true,
}

templ photoAdmin(settings models.InstanceSettings, block blocks.PhotoBlock) {
	<form
		id={ fmt.Sprintf("form-%s", block.ID) }
		hx-put={ fmt.Sprint("/admin/blocks/", block.ID) }
		hx-trigger={ fmt.Sprintf("keyup change from:(#form-%s textarea, #form-%s input) delay:1000ms", block.ID, block.ID) }
		hx-swap="none"
	>
		if settings.EnablePoints {
			@adminPointsField(block.Points)
		}
		@TextareaField(photoTextarea.SetValue(block.Prompt))
	</form>
}
