package blocks

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v4/blocks"
	"github.com/nathanhollows/Rapua/v4/models"
)

templ pincodePlayer(settings models.InstanceSettings, block blocks.PincodeBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
	>
		if settings.EnablePoints && block.Points > 0 {
			<span class="indicator-item indicator-top indicator-center badge badge-info">{ fmt.Sprint(block.GetPoints()) } pts</span>
		}
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Prompt))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-swap="none"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<label
					for={ fmt.Sprintf("pincode-%s", block.ID) }
					class="form-control w-full"
				>
					if data.IsComplete() {
						<p class="label-text font-bold text-success">
							You got it!
						</p>
					} else {
						<div class="join w-full">
							<input
								id={ fmt.Sprintf("pincode-%s", block.ID) }
								name="pincode"
								type="number"
								placeholder="Answer"
								class="input input-primary join-item w-full max-w-xs font-mono tracking-widest"
								autoComplete="off"
								required
							/>
							<button
								class="btn btn-primary btn-outline join-item rounded-r-full"
							>
								Check
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal w-4 h-5"><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16"></path></svg>
							</button>
						</div>
					}
				</label>
			</form>
		</div>
	</div>
}

templ pincodePlayerUpdate(settings models.InstanceSettings, block blocks.PincodeBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
		hx-swap-oob="true"
	>
		if settings.EnablePoints && block.Points > 0 {
			<span class="indicator-item indicator-top indicator-center badge badge-info">{ fmt.Sprint(block.GetPoints()) } pts</span>
		}
		if data.IsComplete() {
			<span class="indicator-item indicator-top indicator-right badge badge-success mr-12">Complete</span>
		} else {
			<span class="indicator-item indicator-top indicator-right badge badge-primary mr-12">Incomplete</span>
		}
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Prompt))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-swap="none"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<label
					for={ fmt.Sprintf("pincode-%s", block.ID) }
					class="form-control w-full"
				>
					if data.IsComplete() {
						<p class="label-text font-bold text-success">
							You got it!
						</p>
					} else {
						<div class="join w-full animate-[wobble_1s_ease-in-out]">
							<input
								id={ fmt.Sprintf("pincode-%s", block.ID) }
								name="pincode"
								type="number"
								placeholder="Answer"
								class="input input-primary join-item w-full max-w-xs font-mono tracking-widest"
								autoComplete="off"
								required
							/>
							<button
								class="btn btn-primary btn-outline join-item rounded-r-full"
							>
								Check
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal w-4 h-5"><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16"></path></svg>
							</button>
						</div>
					}
				</label>
			</form>
		</div>
	</div>
}

templ pincodeAdmin(settings models.InstanceSettings, block blocks.PincodeBlock) {
	<form
		id={ fmt.Sprintf("form-%s", block.ID) }
		hx-post={ fmt.Sprint("/admin/locations/", block.LocationID, "/blocks/", block.ID, "/update") }
		hx-trigger={ fmt.Sprintf("keyup change from:(#form-%s textarea, #form-%s input) delay:1000ms", block.ID, block.ID) }
		hx-swap="none"
	>
		if settings.EnablePoints {
			<label class="form-control w-full mt-5">
				<div class="label">
					<span class="label-text font-bold">Points</span>
				</div>
				<label class="input flex items-center gap-2">
					<input name="points" type="number" class="grow" placeholder="Search" value={ fmt.Sprint(block.Points) }/>
					<span class="badge badge-info tooltip tooltip-left" data-tip="Set to 0 to disable">Optional</span>
				</label>
			</label>
		}
		<label
			for={ fmt.Sprintf("md-%s", block.ID) }
			class="form-control w-full"
		>
			<div class="label">
				<span class="label-text font-bold">Prompt</span>
			</div>
			<textarea
				id={ fmt.Sprintf("md-%s", block.ID) }
				name="prompt"
				rows="2"
				class="markdown-textarea textarea w-full font-mono"
				placeholder="What is third word of the second paragraph? What is the middle name of the person wearing a red hat?"
			>{ block.Prompt }</textarea>
			<div class="label">
				@markdownHint()
			</div>
		</label>
		<label
			for={ fmt.Sprintf("admin-pincode-%s", block.ID) }
			class="form-control w-full"
		>
			<div class="label">
				<span class="label-text font-bold">Pincode</span>
			</div>
			<input
				id={ fmt.Sprintf("admin-pincode-%s", block.ID) }
				type="number"
				name="pincode"
				class="input font-mono tracking-widest max-w-sm"
				placeholder="12345"
				value={ block.Pincode }
			/>
		</label>
	</form>
}
