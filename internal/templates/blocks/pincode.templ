package blocks

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v4/blocks"
	"github.com/nathanhollows/Rapua/v4/models"
)

templ pincodePlayer(settings models.InstanceSettings, block blocks.PincodeBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
	>
		@pointsBadge(settings.EnablePoints, data.GetPointsAwarded())
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Prompt))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-swap="none"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<label
					for={ fmt.Sprintf("pincode-%s", block.ID) }
					class="form-control w-full"
				>
					<div
						class="flex flex-row flex-wrap gap-2 justify-center mb-4"
					>
						for i := range block.Pincode {
							<input
								type="text"
								name="pincode"
								class="input input-lg validator w-auto rounded-md aspect-square text-center font-mono font-bold"
								minlength="1"
								maxlength="1"
								required
								if data.IsComplete() {
									disabled
									value={ string(block.Pincode[i]) }
								}
								_="on input
								if event.target.value is in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] then
									set input to event.target.nextElementSibling
									if input != null then
										input.focus()
									end
								else 
									set event.target.value to ''
								end
							on keydown
								if event.key is in ['Backspace', 'Delete'] then
									set event.target.value to ''
									set input to event.target.previousElementSibling
									input.focus()
									event.preventDefault()
								else if event.key is in ['ArrowLeft'] then
									set input to event.target.previousElementSibling
									if input != null then
										input.focus()
									end
								else if event.key is in ['ArrowRight'] then
									set input to event.target.nextElementSibling
									if input != null then
										input.focus()
									end
								end
							"
							/>
						}
					</div>
					if !data.IsComplete() {
						<button type="submit" class="btn btn-primary w-full">
							Check
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal w-4 h-5"><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16"></path></svg>
						</button>
					} else {
						@templ.Raw(stringToMarkdown(block.UnlockedContent))
					}
				</label>
			</form>
		</div>
	</div>
}

templ pincodePlayerUpdate(settings models.InstanceSettings, block blocks.PincodeBlock, data blocks.PlayerState) {
	<div
		id={ fmt.Sprintf("player-block-%s", block.ID) }
		class="indicator w-full"
		hx-swap-oob="true"
	>
		@pointsBadge(settings.EnablePoints, data.GetPointsAwarded())
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.Prompt))
			<form
				hx-post={ fmt.Sprint("/blocks/validate") }
				hx-swap="none"
			>
				<input type="hidden" name="block" value={ block.ID }/>
				<label
					for={ fmt.Sprintf("pincode-%s", block.ID) }
					class="form-control w-full"
				>
					<div
						if data.IsComplete() {
							class="flex flex-row flex-wrap gap-2 justify-center mb-4"
						} else {
							class="flex flex-row flex-wrap gap-2 justify-center mb-4 animate-[wobble_1s_ease-in-out]"
						}
					>
						for i := range block.Pincode {
							<input
								type="text"
								name="pincode"
								class="input input-lg validator w-auto rounded-md aspect-square text-center font-mono font-bold"
								minlength="1"
								maxlength="1"
								required
								if data.IsComplete() {
									disabled
									value={ string(block.Pincode[i]) }
								}
								_="on input
								if event.target.value is in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] then
									set input to event.target.nextElementSibling
									if input != null then
										input.focus()
									end
								else 
									set event.target.value to ''
								end
							on keydown
								if event.key is in ['Backspace', 'Delete'] then
									set event.target.value to ''
									set input to event.target.previousElementSibling
									input.focus()
									event.preventDefault()
								else if event.key is in ['ArrowLeft'] then
									set input to event.target.previousElementSibling
									if input != null then
										input.focus()
									end
								else if event.key is in ['ArrowRight'] then
									set input to event.target.nextElementSibling
									if input != null then
										input.focus()
									end
								end
							"
							/>
						}
					</div>
					if !data.IsComplete() {
						<button type="submit" class="btn btn-primary w-full">
							Check
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal w-4 h-5"><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16"></path></svg>
						</button>
					} else {
						@templ.Raw(stringToMarkdown(block.UnlockedContent))
					}
				</label>
			</form>
		</div>
	</div>
}

var pincodeTextarea = TextareaParams{
	Name:        "prompt",
	Title:       "Prompt",
	Placeholder: "How many chickens are there in the world?",
	Markdown:    true,
}

var pincodeUnlockedContentTextarea = TextareaParams{
	Name:        "unlocked_content",
	Title:       "Unlocked Content",
	Placeholder: "Aye, you got it! Here's your next clue: ...",
	Markdown:    true,
	Required:    false,
	HelpText:    "This content will be shown to the player when they answer correctly.",
}

templ pincodeAdmin(settings models.InstanceSettings, block blocks.PincodeBlock) {
	<form
		id={ fmt.Sprintf("form-%s", block.ID) }
		hx-put={ fmt.Sprint("/admin/blocks/", block.ID) }
		hx-trigger={ fmt.Sprintf("keyup change from:(#form-%s textarea, #form-%s input) delay:1000ms", block.ID, block.ID) }
		hx-swap="none"
	>
		if settings.EnablePoints {
			@adminPointsField(block.Points)
		}
		@TextareaField(pincodeTextarea.SetValue(block.Prompt))
		<fieldset class="fieldset">
			<legend class="fieldset-legend">Pincode</legend>
			<input
				id={ fmt.Sprintf("admin-pincode-name-%s", block.ID) }
				name="pincode"
				type="number"
				class="input font-mono tracking-widest max-w-sm validator"
				placeholder="12345"
				value={ block.Pincode }
				required
			/>
		</fieldset>
		@TextareaField(pincodeUnlockedContentTextarea.SetValue(block.UnlockedContent))
	</form>
}
