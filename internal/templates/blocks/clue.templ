package blocks

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v5/blocks"
	"github.com/nathanhollows/Rapua/v5/models"
)

templ cluePlayer(settings models.InstanceSettings, block blocks.ClueBlock, data blocks.PlayerState) {
	<div id={ fmt.Sprintf("player-block-%s", block.ID) } class="indicator w-full">
		@pointsBadge(settings.EnablePoints, block.GetPoints())
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			if data.IsComplete() {
				<div>
					@templ.Raw(stringToMarkdown(block.ClueText))
				</div>
			} else {
				<div>
					if block.DescriptionText != "" {
						@templ.Raw(stringToMarkdown(block.DescriptionText))
					}
					<div class="flex justify-center mt-4">
						<form hx-post={ fmt.Sprint("/blocks/validate") } hx-target={ fmt.Sprintf("#player-block-%s", block.ID) }>
							<input type="hidden" name="block" value={ block.ID }/>
							<input type="hidden" name="reveal_clue" value="true"/>
							<button
								type="button"
								class="btn btn-warning"
								_="on click
								if my @type == 'button' then
								halt the event
								set :text to my innerHTML
								set my innerHTML to 'Are you sure?'
								set my @type to 'submit'
								wait 3000ms
								then set my innerHTML to :text
								then set my @type to 'button'
								end
								end"
							>
								if block.ButtonLabel != "" {
									{ block.ButtonLabel }
								} else {
									Reveal Clue
								}
							</button>
						</form>
					</div>
				</div>
			}
		</div>
	</div>
}

templ cluePlayerUpdate(settings models.InstanceSettings, block blocks.ClueBlock, data blocks.PlayerState) {
	<div id={ fmt.Sprintf("player-block-%s", block.ID) } class="indicator w-full" hx-swap-oob="true">
		@pointsBadge(settings.EnablePoints, data.GetPointsAwarded())
		@completionBadge(data)
		<div class="card prose p-5 bg-base-200 shadow-lg w-full">
			@templ.Raw(stringToMarkdown(block.ClueText))
		</div>
	</div>
}

var clueTextarea = TextareaParams{
	Name:        "description_text",
	Title:       "Description Text",
	Placeholder: "Text shown before the clue is revealed",
	Markdown:    true,
	Required:    true,
}

var clueRevealTextarea = TextareaParams{
	Name:        "clue_text",
	Title:       "Revealed Clue Text",
	Placeholder: "The actual clue content that will be revealed",
	Markdown:    true,
	Required:    true,
}

var clueButtonTextInput = TextInputParams{
	Name:         "button_label",
	Title:        "Button Label",
	Placeholder:  "Label for the button to reveal the clue",
	ExtraClasses: "w-full",
	Required:     false,
	HyperScript:  "",
}

templ clueAdmin(settings models.InstanceSettings, block blocks.ClueBlock) {
	<form
		id={ fmt.Sprintf("form-%s", block.ID) }
		hx-put={ fmt.Sprint("/admin/blocks/", block.ID) }
		hx-trigger={ fmt.Sprintf("keyup from:(#form-%s textarea) delay:500ms, keyup from:(#form-%s input) delay:500ms", block.ID, block.ID) }
		hx-swap="none"
	>
		if settings.EnablePoints {
			@adminPointCostField(block.Points)
		}
		@TextareaField(clueTextarea.SetValue(block.DescriptionText))
		@TextareaField(clueRevealTextarea.SetValue(block.ClueText))
		@TextInputField(clueButtonTextInput.SetValue(block.ButtonLabel))
	</form>
}
