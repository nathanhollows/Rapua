package blocks

import "fmt"

templ markdownHint() {
	<div class="flex flex-row gap-1 text-base-content/60 text-xs w-full mt-1 content-end">
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info w-3 h-3"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
		<span>
			This block uses Markdown for formatting content. <a class="link" href="/docs/user/markdown-guide" target="blank">Here's a quick guide</a>.
		</span>
	</div>
}

templ markdownBadge() {
	<a
		href="/docs/user/markdown-guide"
		target="_blank"
		class="hover:text-info tooltip tooltip-right"
		data-tip="This field uses Markdown for formatting content. Click for a guide"
		tabindex="-1"
	>
		<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-markdown" viewBox="0 0 16 16"><path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2z"></path> <path fill-rule="evenodd" d="M9.146 8.146a.5.5 0 0 1 .708 0L11.5 9.793l1.646-1.647a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 0-.708"></path> <path fill-rule="evenodd" d="M11.5 5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 1 .5-.5"></path> <path d="M3.56 11V7.01h.056l1.428 3.239h.774l1.42-3.24h.056V11h1.073V5.001h-1.2l-1.71 3.894h-.039l-1.71-3.894H2.5V11z"></path> </svg>
	</a>
}

// ADMIN FIELDS
templ adminPointsField(points int) {
	<fieldset class="fieldset">
		<legend class="fieldset-legend">Points</legend>
		<label class="input">
			<input
				type="number"
				name="points"
				class="grow"
				placeholder="Points"
				value={ fmt.Sprint(points) }
				_="on change if my value == '' then set my value to 0 end"
			/>
			<span
				class="badge badge-neutral badge-xs tooltip tooltip-left"
				data-tip="Set to 0 to disable points"
			>
				Optional
			</span>
		</label>
	</fieldset>
}

templ adminPointCostField(points int) {
	<fieldset class="fieldset">
		<legend class="fieldset-legend">Point cost</legend>
		<label class="input">
			<input
				type="number"
				name="points"
				class="grow"
				placeholder="Points"
				value={ fmt.Sprint(points) }
				_="on change if my value == '' then set my value to 0 end"
			/>
			<span
				class="badge badge-neutral badge-xs tooltip tooltip-left"
				data-tip="Set to 0 to deduct no points"
			>
				Optional
			</span>
		</label>
		<span class="label">
			The number of points to <span class="font-bold">deduct</span> from the team when they reveal the clue.
		</span>
	</fieldset>
}

// Textarea field
type TextareaParams struct {
	Name         string
	Value        string
	Title        string
	Placeholder  string
	HelpText     string
	ExtraClasses string
	Required     bool
	Markdown     bool
	HyperScript  string
}

func (params TextareaParams) SetValue(value string) TextareaParams {
	val := params
	val.Value = value
	return val
}

templ TextareaField(params TextareaParams) {
	<fieldset class="fieldset">
		if params.Title != "" {
			<legend class="fieldset-legend justify-start w-full">
				@markdownBadge()
				{ params.Title }
				if !params.Required {
					<span
						class="ml-auto badge badge-neutral badge-xs tooltip tooltip-left"
						data-tip="This field is optional"
					>
						Optional
					</span>
				}
			</legend>
		}
		<textarea
			name={ params.Name }
			if params.Markdown {
				class={ fmt.Sprintf("markdown-textarea textarea font-mono w-full %s", params.ExtraClasses) }
			} else {
				class={ fmt.Sprintf("textarea w-full %s", params.ExtraClasses) }
			}
			style="field-sizing: content;"
			if params.Placeholder != "" {
				placeholder={ params.Placeholder }
			} else {
				placeholder="Enter your text here..."
			}
			if params.Required {
				required
			}
			if params.HyperScript != "" {
				_={ params.HyperScript }
			}
		>
			if params.Value != "" {
				{ params.Value }
			}
		</textarea>
		if params.HelpText != "" {
			<div class="label">
				{ params.HelpText }
			</div>
		}
	</fieldset>
}

// Text input field
type TextInputParams struct {
	Name         string
	Value        string
	Title        string
	Placeholder  string
	HelpText     string
	ExtraClasses string
	Required     bool
	HyperScript  string
}

func (params TextInputParams) SetValue(value string) TextInputParams {
	val := params
	val.Value = value
	return val
}

templ TextInputField(params TextInputParams) {
	<fieldset class="fieldset">
		if params.Title != "" {
			<legend class="fieldset-legend">
				{ params.Title }
			</legend>
		}
		<input
			type="text"
			name={ params.Name }
			class={ fmt.Sprintf("input %s", params.ExtraClasses) }
			if params.Required {
				required
			}
			if params.Placeholder != "" {
				placeholder={ params.Placeholder }
			}
			if params.Value != "" {
				value={ params.Value }
			}
			if params.HyperScript != "" {
				_={ params.HyperScript }
			}
		/>
		if params.HelpText != "" {
			<div class="label">
				{ params.HelpText }
			</div>
		}
	</fieldset>
}
