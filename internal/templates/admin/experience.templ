package templates

import "github.com/nathanhollows/Rapua/v4/models"

templ Experience(settings models.InstanceSettings, locationCount int) {
	<form
		hx-post="/admin/experience"
		hx-trigger="submit"
		hx-swap="none"
	>
		<!-- Header -->
		<div class="flex flex-row justify-between items-center w-full p-5">
			<h1 class="text-2xl font-bold">Craft the experience</h1>
			<button
				class="btn btn-primary"
				disabled
				_="on change from <form input/>
				remove @disabled
			"
			>Save</button>
		</div>
		<div class="flex flex-col lg:flex-row m-5 pt-0 gap-5">
			<div class="grid h-fit flex-grow min-w-0">
				<!--  settings -->
				<section id="movement-settings">
					<div class="divider divider-accent font-semibold pb-5 text-sm">Routing</div>
					<!-- Routing -->
					<div class="my-5">
						<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row items-center gap-1">
							<strong>Route Strategy</strong>
							<div class="dropdown dropdown-hover">
								<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
								</div>
								<div
									tabindex="0"
									class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow"
								>
									<div tabindex="0" class="card-body">
										for _, v := range models.GetRouteStrategies() {
											<h2 class="card-title">{ v.String() }</h2>
											<p>{ v.Description() }</p>
										}
									</div>
								</div>
							</div>
						</div>
						<span class="font-light text-sm">
							How the system chooses the next location for a team.
						</span>
						<fieldset class="fieldset py-3 text-sm">
							for i, v := range models.GetRouteStrategies() {
								<label class="label text-base-content">
									<input
										type="radio"
										name="routeStrategy"
										value={ v.String() }
										data-index={ intToString(i) }
										class="radio"
										if settings.RouteStrategy == v {
											checked
										}
										onchange="updatePreview()"
										_="on click
											if @data-index is not '0'
												remove .invisible from #maxLocationsDisabledMessage
												add @disabled to #maxLocations
											else 
												add .invisible to #maxLocationsDisabledMessage
												remove @disabled from #maxLocations
											end
											on load if my.checked and @data-index is not '0'
												remove .invisible from #maxLocationsDisabledMessage
												add @disabled to #maxLocations
											end
										"
									/>
									<span>{ v.String() }</span>
								</label>
							}
						</fieldset>
					</div>
					<!-- Maximum locations to show -->
					<div class="my-5">
						<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row items-center gap-1">
							<strong>Location Limit</strong>
							<div class="dropdown dropdown-hover">
								<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
								</div>
								<div
									tabindex="0"
									class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow-2xl"
								>
									<div tabindex="0" class="card-body">
										<p>Limit how many locations or clues are show to a team at a time. This is useful for dispersing learners.</p>
										<p>This setting is only enabled for Randomised Routes.</p>
									</div>
								</div>
							</div>
						</div>
						<div class="text-sm font-light">How many locations should the team be presented with?</div>
						<fieldset class="fieldset">
							<input
								type="number"
								name="maxLocations"
								min="0"
								step="1"
								placeholder="3"
								value={ intToString(settings.MaxNextLocations) }
								class="input w-full"
								onkeyup="updatePreview()"
								id="maxLocations"
							/>
							<div class="flex justify-between">
								<p class="label">Set to 0 to show all</p>
								<span
									id="maxLocationsDisabledMessage"
									class="label text-error invisible"
								>Only available for { models.RouteStrategyRandom.String() }</span>
							</div>
						</fieldset>
					</div>
					<!-- End Maximum locations to show -->
					<div class="divider divider-accent font-semibold pb-5 text-sm">Player view</div>
					<!-- Navigation Display -->
					<div class="mb-5">
						<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row items-center gap-1">
							<strong>Navigation Display</strong>
							<div class="dropdown dropdown-hover">
								<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
								</div>
								<div tabindex="0" class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow">
									<div tabindex="0" class="card-body">
										for _, v := range models.GetNavigationDisplayModes() {
											<h2 class="card-title">{ v.String() }</h2>
											<p>{ v.Description() }</p>
										}
									</div>
								</div>
							</div>
						</div>
						<div class="text-sm font-light">How locations are revealed to players.</div>
						<fieldset class="fieldset py-3 text-sm">
							for i, v := range models.GetNavigationDisplayModes() {
								<label class="label text-base-content">
									<input
										type="radio"
										name="navigationDisplayMode"
										value={ v.String() }
										data-index={ intToString(i) }
										class="radio"
										onchange="updatePreview()"
										if settings.NavigationDisplayMode == v {
											checked
										}
										_="on click
											if @data-index is '3'
												remove .invisible from #teamCountDisabledMessage
												add @disabled to #showTeamCount
											else 
												add .invisible to #teamCountDisabledMessage
												remove @disabled from #showTeamCount
											end
											on load if my.checked and @data-index is '3'
												remove .invisible from #teamCountDisabledMessage
												add @disabled to #showTeamCount
											end
										"
									/>
									<span>{ v.String() }</span>
								</label>
							}
						</fieldset>
					</div>
					<!-- Show visiting count -->
					<div class="my-5">
						<div class="flex justify-between">
							<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row items-center gap-1">
								<strong>Display team count</strong>
								<div class="dropdown dropdown-hover">
									<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
									</div>
									<div
										tabindex="0"
										class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow-2xl"
									>
										<div tabindex="0" class="card-body">
											<p>Show players how many teams are visiting a location. This can be useful for collaborative activities or minimising congestion.</p>
										</div>
									</div>
								</div>
							</div>
						</div>
						<label class="label text-base-content text-sm pt-3">
							<input
								type="checkbox"
								id="showTeamCount"
								name="showTeamCount"
								class="toggle"
								onchange="updatePreview()"
								if settings.ShowTeamCount {
									checked
								}
							/>
							Enable points on locations and content blocks?
						</label>
						<p
							id="teamCountDisabledMessage"
							class="label text-xs text-error invisible w-full items-center"
						>
							Disabled when { models.NavigationDisplayClues.String() } is selected
						</p>
					</div>
					<!-- End Show visiting count -->
					<!-- Completion Method -->
					<div class="my-5">
						<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row items-center gap-1">
							<strong>Check out of every location?</strong>
						</div>
						<div class="text-sm font-light">
							Do players need to check out of locations? Useful for tracking time spent across locations.
						</div>
						<label class="label text-base-content text-sm pt-3">
							<input
								type="checkbox"
								id="mustCheckOut"
								name="mustCheckOut"
								class="toggle"
								if settings.MustCheckOut {
									checked
								}
							/>
							Include a button at the end of every location for players to check out?
						</label>
					</div>
					<!-- End Completion Method -->
				</section>
				<div class="divider divider-accent font-semibold pb-5 text-sm">Competition</div>
				<!-- Enable Points -->
				<div class="my-5">
					<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row items-center gap-1">
						<strong>Enable Points</strong>
						<div class="dropdown dropdown-hover">
							<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
							</div>
							<div
								tabindex="0"
								class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow-2xl"
							>
								<div tabindex="0" class="card-body">
									<h2 class="card-title text-center">Enable Points</h2>
									<p>This settings allows teams to accrue points for checking in. This setting makes the experience more gamelike but may impact intrinsic motivation.</p>
								</div>
							</div>
						</div>
					</div>
					<label class="label text-base-content text-sm pt-3">
						<input
							type="checkbox"
							id="enablePoints"
							name="enablePoints"
							class="toggle"
							onchange="updatePreview()"
							if settings.EnablePoints {
								checked
							}
							_="on click or load
									if me.checked
										remove @disabled from #enableBonusPoints
										add .invisible to #bonusPointsDisabledMessage
									else 
										add @disabled to #enableBonusPoints
										remove .invisible from #bonusPointsDisabledMessage
									end"
						/>
						Enable points on locations and content blocks?
					</label>
				</div>
				<!-- End Enable Points -->
				<!-- Bonus Points -->
				<div class="my-5">
					<div class="flex justify-between">
						<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row items-center gap-1">
							<strong>Bonus points for early check-ins</strong>
							<div class="dropdown dropdown-hover">
								<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
								</div>
								<div
									tabindex="0"
									class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow-2xl"
								>
									<div tabindex="0" class="card-body">
										<h2 class="card-title text-center">Early Check-In Bonus</h2>
										<p>
											This setting awards bonus points to the first, second, and third team to check-in to each location. 
										</p>
										<div class="prose text-sm">
											<ul>
												<li>First receives 2x the base points.</li>
												<li>Second receives 1.5x the base points.</li>
												<li>Third receives 1.2x the base points.</li>
											</ul>
										</div>
										<p>Base points are awarded for each check-in and are set for each location.</p>
										<p>This setting encourages players to race and disperse.</p>
									</div>
								</div>
							</div>
						</div>
					</div>
					<label class="label text-base-content text-sm pt-3">
						<input
							type="checkbox"
							id="enableBonusPoints"
							name="enableBonusPoints"
							class="toggle"
							onchange="updatePreview()"
							if settings.EnableBonusPoints {
								checked
							}
						/>
						Enable points on locations and content blocks?
					</label>
					<p
						id="bonusPointsDisabledMessage"
						class="label text-xs text-error invisible w-full"
					>
						Points are not enabled for this game.
					</p>
				</div>
				<!-- End Bonus Points -->
				<div class="text-center">
					<button
						class="btn btn-primary w-1/2"
						disabled
						_="on change from <form input/>
				remove @disabled
			"
					>Save</button>
				</div>
			</div>
			<!-- Preview Divider -->
			<div class="divider lg:divider-horizontal">
				<span class="lg:[writing-mode:vertical-lr]">
					Preview
				</span>
			</div>
			<!-- Preview -->
			<div class="h-min-content">
				<div class="mockup-phone h-min sticky top-8">
					<div class="mockup-phone-display overflow-y-scroll overflow-x-hidden" data-theme="cupcake">
						<!-- Demo -->
						<div
							if locationCount > 2 {
								hx-post="/admin/experience/preview"
								hx-trigger="load, change delay:500ms from:(#movement-settings input), keyup delay:500ms from:(#movement-settings input), change delay:500ms from:(#movement-settings input)"
								hx-swap="innerHTML"
								hx-include="#movement-settings"
							}
							class="sm:mx-auto sm:w-full sm:max-w-sm block overflow-y-scroll p-5 py-12"
						>
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-compass w-16 h-16 mx-auto"><path d="m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z"></path><circle cx="12" cy="12" r="10"></circle></svg>
							<h2 class="mt-5 mb-3 text-center text-2xl font-bold leading-9 tracking-tight">
								Next location
							</h2>
							<div class="prose">
								<p class="text-center pb-5">
									You may choose any of the following locations. Use the map below to help
									find where you want to go.
								</p>
								<div id="locationList" class="text-center"></div>
								<div id="navigationView" class="text-center mt-5"></div>
							</div>
						</div>
						<!-- /Demo -->
					</div>
				</div>
			</div>
		</div>
	</form>
	<script>
var locations = [
  { name: "Eiffel Tower", clue: "Find the tallest structure in Paris." },
  { name: "Statue of Liberty", clue: "Look for the statue that welcomes visitors to New York Harbor." },
  { name: "Colosseum", clue: "Find the ancient amphitheater in Rome." },
  { name: "Great Wall of China", clue: "Search for the longest wall in the world." },
  { name: "Taj Mahal", clue: "Locate the white marble mausoleum in India." }
];

var teams = Array.from({ length: locations.length }, () => Math.floor(Math.random() * 5) + 1);

function getCheckedData(name) {
  const checkedElement = document.querySelector(`input[name="${name}"]:checked`);
  return checkedElement ? checkedElement.getAttribute("data-index") : null;
}

function updatePreview() {
  // If #locationList or #navigationView is not found, return
  if (!document.getElementById('locationList') || !document.getElementById('navigationView')) {
	return;
  }
  const routeStrategy = getCheckedData("routeStrategy");
  const navigationDisplayMode = getCheckedData("navigationDisplayMode");
  let maxLocations = parseInt(document.getElementById('maxLocations').value) || 0;
  const completionMethod = getCheckedData("completionMethod");

  let locationListHtml = "";
  let navigationViewHtml = "";

  if (routeStrategy === "0") { // Random mode
    shuffleArray(locations);
  } else if (routeStrategy === "2") { // Ordered mode
    maxLocations = 1;
  }

  const limit = (routeStrategy === "1") ? locations.length : (maxLocations === 0 ? locations.length : Math.min(maxLocations, locations.length));

  switch (navigationDisplayMode) {
    case "0": // Show Map
      navigationViewHtml = '<div class="h-64 w-full bg-neutral-content rounded-lg shadow-lg flex justify-center items-center text-neutral"><em>Map</em></div>';
      break;
    case "1": // Show Map and Names
      locationListHtml = generateLocationList(limit, completionMethod);
      navigationViewHtml = '<div class="h-64 w-full bg-neutral-content rounded-lg shadow-lg flex justify-center items-center text-neutral"><em>Map</em></div>';
      break;
    case "2": // Show Location Names Only
      locationListHtml = generateLocationList(limit, completionMethod);
      break;
    case "3": // Show Clues
      navigationViewHtml = generateClueList(limit);
      break;
  }

  if (routeStrategy === "1") { // Free Roam mode
    switch (navigationDisplayMode) {
      case "0": // Show Map
        navigationViewHtml = '<div class="h-64 w-full bg-neutral-content rounded-lg shadow-lg flex justify-center items-center text-neutral"><em>Map</em></div>';
        break;
      case "1": // Show Map and Names
        locationListHtml = generateLocationList(locations.length, completionMethod);
        navigationViewHtml = '<div class="h-64 w-full bg-neutral-content rounded-lg shadow-lg flex justify-center items-center text-neutral"><em>Map</em></div>';
        break;
      case "2": // Show Location Names Only
        locationListHtml = generateLocationList(locations.length, completionMethod);
        break;
      case "3": // Show Clues
        navigationViewHtml = generateClueList(locations.length);
        break;
    }
  }

  document.getElementById('locationList').innerHTML = locationListHtml;
  document.getElementById('navigationView').innerHTML = navigationViewHtml;
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function generateLocationList(limit, completionMethod) {
  let html = "";
  for (let i = 0; i < limit; i++) {
    html += `<p class="text-center"><em>${locations[i].name}</em>`;
    if (document.getElementById('showTeamCount').checked) {
      html += `<br><span class="badge badge-ghost">${teams[i]} Teams Visiting</span>`;
    }
    html += `</p>`;
  }
  return html;
}

function generateClueList(limit) {
  let html = "";
  for (let i = 0; i < limit; i++) {
    html += `<blockquote class="text-center">${locations[i].clue}</blockquote>`;
  }
  return html;
}

// Initial update
updatePreview();
</script>
}
