package templates

import (
	"fmt"
	"github.com/nathanhollows/Rapua/internal/models"
)

templ AddLocation() {
	@locationCSS()
	<div class="flex flex-col w-full items-start">
		<!-- Header -->
		<div class="p-5">
			<h1 class="text-2xl font-bold">Add a location</h1>
		</div>
		<!-- Content -->
		<form
			class="w-full"
			method="post"
		>
			<div class="flex-grow container mx-auto p-5">
				<div class="flex flex-row space-x-8">
					<div class="flex flex-col">
						<div id="map" class="w-96 h-96 rounded-lg shadow-lg mt-5"></div>
						<div class="form-control">
							<label class="label cursor-pointer">
								<span class="label-text">Save map location</span>
								<input
									type="checkbox"
									name="location"
									class="checkbox"
								/>
							</label>
						</div>
					</div>
					<input
						type="hidden"
						name="latitude"
					/>
					<input
						type="hidden"
						name="longitude"
					/>
					<!-- Location Title and Content Textarea -->
					<div class="flex-1">
						<div class="mb-4">
							<label
								for="name"
								class="block text-base font-bold mb-2"
							>Location name</label>
							<input
								type="text"
								id="name"
								name="name"
								class="input input-bordered w-full"
								placeholder="Enter title"
							/>
						</div>
						<div class="mb-4">
							<label
								for="content"
								class="block text-base font-bold mb-2"
							>Content</label>
							<textarea
								id="content"
								name="content"
								rows="7"
								class="textarea textarea-bordered w-full"
								placeholder="Enter optional content here"
							></textarea>
						</div>
						<button class="btn btn-primary">
							Save
						</button>
					</div>
				</div>
			</div>
		</form>
	</div>
	@locationScript()
}

templ EditLocation(location models.Location, settings models.InstanceSettings) {
	@locationCSS()
	<form
		hx-post={ fmt.Sprint("/admin/locations/", location.MarkerID) }
		hx-trigger="submit"
		hx-swap="none"
	>
		<!-- Header -->
		<div class="flex flex-row justify-between items-center w-full p-5">
			<h1 class="text-2xl font-bold">Editing <em>{ location.Name }</em></h1>
			<button class="btn btn-primary">Save</button>
		</div>
		<div class="flex-grow container mx-auto">
			<div class="flex flex-col md:flex-row p-5 space-5 md:space-x-24">
				<div class="flex-1">
					<!-- Location Title -->
					<label for="name" class="form-control w-full max-w-xs mb-5">
						<div class="label">
							<span class="label-text font-bold">Location name</span>
						</div>
						<input
							type="text"
							id="name"
							name="name"
							class="input input-bordered w-full"
							value={ location.Marker.Name }
							placeholder="Enter title"
						/>
					</label>
					<!-- Content -->
					<label for="content" class="form-control w-full my-5">
						<div class="label">
							<span class="label-text font-bold">Content</span>
							<label class="label-text-alt flex flex-row gap-3">
								Preview
								<input type="checkbox" class="toggle toggle-sm" name="preview" id="togglePreview" class="checkbox" onclick="previewMD()"/>
							</label>
						</div>
						<textarea
							id="content"
							name="content"
							rows="7"
							class="textarea textarea-bordered w-full font-mono"
							placeholder="Enter optional content here"
						>{ location.Content.Content }</textarea>
						<div id="preview-content" class="flex items-center justify-center min-h-48 border border-base-300 hidden card w-full bg-base-200 rounded-[var(--rounded-btn)] p-5"></div>
						<div class="label">
							<span class="label-text-alt">This is shown to players after checking in.</span>
							<span class="label-text-alt flex flex-row content-center gap-1">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info w-5 h-5"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
								<span class="self-center">
									This app uses Markdown for formatting content. <a class="link" href="/admin/markdown" target="blank">Here's a quick guide</a>.
								</span>
							</span>
						</div>
					</label>
					<!-- Clues -->
					<div class="label">
						<span class="label-text font-bold flex gap-3 items-center">
							Clues
							if settings.NavigationMethod.String() != "Show Clues" {
								<span class="badge badge-sm badge-outline flex gap-1 tooltip cursor-help" data-tip={ fmt.Sprint("Navigation Method is set to ", settings.NavigationMethod.String()) }>
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info w-3 h-3"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
									Disabled
								</span>
							}
						</span>
					</div>
					<div>
						for _, clue := range location.Clues {
							<div class="prose my-5 mx-3">
								<blockquote class="mb-0">
									<div class="flex gap-3 justify-end">
										{ clue.Content }
										<button type="button" class="btn btn-xs btn-ghost" onclick="this.previousElementSibling.classList.toggle('hidden')">
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil w-4 h-4"><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"></path><path d="m15 5 4 4"></path></svg>
											Edit
										</button>
										<button type="button" class="btn btn-xs btn-ghost text-error" onclick="this.closest('div').remove()">
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-delete w-4 h-4"><path d="M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z"></path><path d="m12 9 6 6"></path><path d="m18 9-6 6"></path></svg>
											Delete
										</button>
									</div>
								</blockquote>
							</div>
						}
					</div>
					<button class="btn btn-primary">Save</button>
				</div>
				<!-- Sidebar -->
				<div class="flex flex-col">
					<!-- Map -->
					<div id="map" class="w-96 h-96 rounded-lg shadow-lg mt-5"></div>
					<div class="form-control">
						<label class="label cursor-pointer">
							<span class="label-text">Save map location</span>
							<input
								type="checkbox"
								name="location"
								class="checkbox"
								checked="checked"
							/>
						</label>
					</div>
					<!-- Hidden inputs for form handling -->
					<input type="hidden" name="code" value={ location.Marker.Code }/>
					<input type="hidden" name="latitude" value={ floatToString(location.Marker.Lat) }/>
					<input type="hidden" name="longitude" value={ floatToString(location.Marker.Lng) }/>
				</div>
			</div>
		</div>
	</form>
	<script>
  function previewMD() {
    var checkBox = document.getElementById("togglePreview");
    var textarea = document.getElementById("content");
    var preview = document.getElementById("preview-content");

    if (checkBox.checked == true){
      textarea.classList.add("hidden");
      preview.classList.remove("hidden");
      preview.setAttribute("aria-busy", true)
      preview.innerHTML = "<span class='loading loading-ring loading-lg'></span>"

      var xhr = new XMLHttpRequest();
      xhr.open("POST", '/admin/markdown/preview', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(JSON.stringify({
        markdown: textarea.value
      }));

      xhr.onreadystatechange = (e) => {
        preview.innerHTML = xhr.response
      }
    } else {
      textarea.classList.remove("hidden");
      preview.classList.add("hidden");
      preview.innerHTML = null
    }
  }
</script>
	@locationScript()
}

templ locationCSS() {
	<link
		href="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.css"
		rel="stylesheet"
	/>
}

templ locationScript() {
	<script src="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.js"></script>
	<script>

	// Resize textareas to fit content
	const tx = document.getElementsByTagName("textarea");
for (let i = 0; i < tx.length; i++) {
  tx[i].setAttribute("style", "height:" + (tx[i].scrollHeight) + "px;overflow-y:hidden;");
  tx[i].addEventListener("input", OnInput, false);
}

function OnInput() {
  this.style.height = 'auto';
  this.style.height = (this.scrollHeight) + "px";
}

  coords = [170.5111643, -45.8650509]
  zoom = 14

  // Check if #longitude and #latitude are set
  if (document.querySelector('input[name="longitude"]').value != "" && document.querySelector('input[name="latitude"]').value != "") {
	  coords = [parseFloat(document.querySelector('input[name="longitude"]').value), parseFloat(document.querySelector('input[name="latitude"]').value)]
	  zoom = 16
  }

  mapboxgl.accessToken = document.getElementById('mapbox_key').dataset.key;
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    style = 'mapbox://styles/nathanhollows/cl9w3nxff002m14sy9fco4vnr'
  } else {
    style = 'mapbox://styles/nathanhollows/clszboe2y005i01oid8ca37jm'
  }
  var coordinates = document.getElementById('coordinates');
  var map = new mapboxgl.Map({
      container: 'map',
      style: style,
      center: coords,
      zoom: zoom
  });

  var marker = new mapboxgl.Marker({
  })
  .setLngLat(coords)
  .addTo(map);

  map.on('drag', function() {
      centro=map.getCenter();
      marker.setLngLat(centro);
      // Set the latitude and longitude fields
      document.querySelector('input[name="latitude"]').value = centro.lat;
      document.querySelector('input[name="longitude"]').value = centro.lng;
      // Set the switch to true
      document.querySelector('input[name="location"]').checked = true;
  });
  map.on('zoom', function() {
      centro=map.getCenter();
      marker.setLngLat(centro);
  });
  // If the switch is checked, save the map location else don't
  document.querySelector('input[name="switch"]').addEventListener('change', function(e) {
      if (e.target.checked) {
          centro=map.getCenter();
          marker.setLngLat(centro);
          // Set the latitude and longitude fields
          document.querySelector('input[name="latitude"]').value = centro.lat;
          document.querySelector('input[name="longitude"]').value = centro.lng;
      } else {
          document.querySelector('input[name="latitude"]').value = "";
          document.querySelector('input[name="longitude"]').value = "";
      }
  });
</script>
}
