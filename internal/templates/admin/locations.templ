package templates

import (
	"fmt"
	"github.com/nathanhollows/Rapua/internal/models"
)

templ LocationsIndex(settings models.InstanceSettings, locations models.Locations) {
	<!-- Header -->
	<div class="flex flex-col gap-3 md:flex-row justify-between items-center w-full p-5">
		<h1 class="text-2xl font-bold">
			Locations 
			<span class="badge badge-ghost">{ fmt.Sprint(len(locations)) }</span>
			<span class="htmx-indicator loading loading-dots loading-md text-info">Updating</span>
		</h1>
		<span class="flex md:flex-row flex-wrap justify-center gap-5">
			if len(locations) > 1 {
				<div class="join">
					<a
						class="btn btn-base btn-outline join-item mb-3 md:mb-0"
						hx-get="/admin/locations/qr-codes.zip"
						hx-swap="none"
					>
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-image-down"><path d="M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"></path> <path d="m14 19 3 3v-5.5"></path> <path d="m17 22 3-3"></path> <circle cx="9" cy="9" r="2"></circle></svg>
						QR codes
					</a>
					<a
						class="btn btn-base btn-outline join-item"
						href="/admin/locations/posters.pdf"
					>
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-down"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path> <path d="M14 2v4a2 2 0 0 0 2 2h4"></path> <path d="M12 18v-6"></path> <path d="m9 15 3 3 3-3"></path></svg>
						Posters
					</a>
				</div>
			}
			<a
				href="/admin/locations/new"
				hx-boost="true"
				class="btn btn-secondary"
			>
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin-plus w-5 h-5"><path d="M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"></path><circle cx="12" cy="10" r="3"></circle><path d="M16 18h6"></path><path d="M19 15v6"></path></svg>
				Add Location
			</a>
		</span>
	</div>
	<!-- Locations list -->
	<div class="px-5">
		<form
			if settings.NavigationMode == models.OrderedNav {
				class="join join-vertical w-full shadow sortable"
			} else {
				class="join join-vertical w-full shadow"
			}
			hx-post="/admin/locations/reorder"
			hx-trigger="end"
			hx-swap="none"
			hx-indicator=".htmx-indicator"
		>
			for _, location := range locations {
				<div
					class="flex flex-row justify-between items-center gap-3 bg-base-200 hover:bg-base-300 rounded-lg p-4 join-item"
					data-order={ fmt.Sprint(location.Order) }
				>
					<div class="flex flex-row items-center gap-3 grow">
						<!-- Drag handle -->
						if settings.NavigationMode == models.OrderedNav {
							<div
								class="tooltip tooltip-right flex gap-3 cursor-move"
								data-tip="Drag to reorder"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-grip-vertical"><circle cx="9" cy="12" r="1"></circle><circle cx="9" cy="5" r="1"></circle><circle cx="9" cy="19" r="1"></circle><circle cx="15" cy="12" r="1"></circle><circle cx="15" cy="5" r="1"></circle><circle cx="15" cy="19" r="1"></circle></svg>
							</div>
							<input type="hidden" name="location" value={ location.MarkerID }/>
						}
						<!-- Marker icon -->
						if location.Marker.Lat != 0 {
							<span
								class="tooltip cursor-help"
								data-tip="Has coordinates"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path> <circle cx="12" cy="10" r="3"></circle> </svg>
							</span>
						} else {
							<span
								class="tooltip cursor-help"
								data-tip="No coordinates set"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin-off tooltip" data-tip="Location has no coordinates set"><path d="M5.43 5.43A8.06 8.06 0 0 0 4 10c0 6 8 12 8 12a29.94 29.94 0 0 0 5-5"></path> <path d="M19.18 13.52A8.66 8.66 0 0 0 20 10a8 8 0 0 0-8-8 7.88 7.88 0 0 0-3.52.82"></path> <path d="M9.13 9.13A2.78 2.78 0 0 0 9 10a3 3 0 0 0 3 3 2.78 2.78 0 0 0 .87-.13"></path> <path d="M14.9 9.25a3 3 0 0 0-2.15-2.16"></path> <line x1="2" x2="22" y1="2" y2="22"></line> </svg>
							</span>
						}
						<!-- Clue indicator -->
						if settings.NavigationMethod == models.ShowClues {
							if len(location.Clues) == 0 {
								<span class="tooltip text-neutral cursor-help" data-tip="No clues">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-x"><path d="m13.5 8.5-5 5"></path><path d="m8.5 8.5 5 5"></path><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>
								</span>
							} else {
								<span class="tooltip cursor-help" data-tip="Has clues">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>
								</span>
							}
						}
						<!-- Location code -->
						<div
							class="badge badge-ghost basis-16 tooltip"
							data-tip="Unique location code"
						>
							<code>
								{ location.Marker.Code }
							</code>
						</div>
						<!-- Location name -->
						<a
							href={ templ.SafeURL(fmt.Sprint("/admin/locations/", location.MarkerID)) }
							class="link flex-grow"
							hx-boost="true"
							hx-swap="outerHTML"
						>
							{ location.Marker.Name }
						</a>
						if settings.EnablePoints {
							<span class="badge">
								{ fmt.Sprint(location.Points) } pts
							</span>
						}
					</div>
				</div>
			}
		</form>
	</div>
	<script>
htmx.onLoad(function(content) {
    var sortables = content.querySelectorAll(".sortable");
    for (var i = 0; i < sortables.length; i++) {
      var sortable = sortables[i];
      var sortableInstance = new Sortable(sortable, {
          animation: 150,
          ghostClass: 'blue-background-class',
          handle: ".cursor-move",

          // Make the `.htmx-indicator` unsortable
          filter: ".htmx-indicator",
          onMove: function (evt) {
            return evt.related.className.indexOf('htmx-indicator') === -1;
          },

          // Disable sorting on the `end` event
          onEnd: function (evt) {
            this.option("disabled", true);
          }
      });

      // Re-enable sorting on the `htmx:afterSwap` event
      sortable.addEventListener("htmx:afterSwap", function() {
        sortableInstance.option("disabled", false);
      });
    }
})
</script>
}

templ AddLocation() {
	<!-- Header -->
	<div class="flex flex-col gap-3 md:flex-row justify-between items-center w-full p-5">
		<h1 class="text-2xl font-bold">
			Add a location
		</h1>
		<!-- <button type="submit" class="btn btn-primary">Save</button> -->
	</div>
	<div class="flex flex-col w-full items-start">
		<!-- Content -->
		<form
			class="w-full"
			method="post"
		>
			<div class="flex-grow container mx-auto p-5">
				<div class="flex flex-row gap-5">
					<div class="flex flex-col">
						<div id="map" class="w-96 h-96 rounded-lg shadow-lg mt-5"></div>
						<div class="form-control">
							<label class="label cursor-pointer">
								<span class="label-text">Save map location</span>
								<input
									type="checkbox"
									name="location"
									class="checkbox checkbox-sm"
								/>
							</label>
						</div>
					</div>
					<input
						type="hidden"
						name="latitude"
					/>
					<input
						type="hidden"
						name="longitude"
					/>
					<!-- Location Title and Content Textarea -->
					<div class="flex-1">
						<div class="mb-4">
							<label
								for="name"
								class="block text-base font-bold mb-2"
							>Location name</label>
							<input
								type="text"
								id="name"
								name="name"
								class="input input-bordered w-full"
								placeholder="Enter title"
							/>
						</div>
						<div class="mb-4">
							<label
								for="content"
								class="block text-base font-bold mb-2"
							>Content</label>
							<textarea
								id="content"
								name="content"
								rows="7"
								class="textarea textarea-bordered w-full"
								placeholder="Enter optional content here"
							></textarea>
						</div>
						<button class="btn btn-primary">
							Save
						</button>
					</div>
				</div>
			</div>
		</form>
	</div>
	@locationScript()
}

templ EditLocation(location models.Location, settings models.InstanceSettings) {
	<form
		hx-post={ fmt.Sprint("/admin/locations/", location.MarkerID) }
		hx-trigger="submit"
		hx-swap="none"
	>
		<!-- Header -->
		<div class="flex flex-col sm:flex-row gap-3 justify-between items-center w-full p-5">
			<h1 class="text-2xl font-bold">Editing <em>{ location.Name }</em></h1>
			<div class="flex gap-3">
				<button type="button" class="btn btn-error" onclick="confirm_delete_modal.showModal();">Delete</button>
				<button type="submit" class="btn btn-primary">Save</button>
			</div>
		</div>
		<div class="flex-grow mx-auto">
			<div class="flex flex-col md:flex-row p-5 pt-0 gap-5 lg:gap-20">
				<div class="flex flex-col flex-grow">
					<div class="flex flex-col sm:flex-row gap-5 mb-5">
						<!-- Location Title -->
						<label for="name" class="form-control w-full md:w-1/2">
							<div class="label">
								<span class="label-text font-bold">Location name</span>
							</div>
							<input
								type="text"
								id="name"
								name="name"
								class="input input-bordered w-full"
								value={ location.Marker.Name }
								placeholder="Enter title"
							/>
						</label>
						if settings.EnablePoints {
							<!-- Location Points -->
							<label for="points" class="form-control w-full md:w-1/2">
								<div class="label">
									<span class="label-text font-bold">Points</span>
									if !settings.EnablePoints {
										<span class="label-text-alt">
											<span class="flex gap-1 badge badge-outline badge-sm tooltip cursor-help" data-tip="Points are currently disabled">
												<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info w-3 h-3"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
												Disabled
											</span>
										</span>
									}
								</div>
								<input
									type="number"
									id="points"
									name="points"
									class="input input-bordered w-full"
									value={ fmt.Sprint(location.Points) }
									placeholder="Enter points"
								/>
							</label>
						} else {
							<input type="hidden" name="points" value={ fmt.Sprint(location.Points) }/>
						}
					</div>
					<!-- Content -->
					<label for="content" class="form-control w-full my-5">
						<div class="label">
							<span class="label-text font-bold">Content</span>
							<label class="label-text-alt flex flex-row gap-3">
								Preview
								<input type="checkbox" class="toggle toggle-sm" name="preview" id="togglePreview" class="checkbox" onclick="previewMD()"/>
							</label>
						</div>
						<textarea
							id="content"
							name="content"
							rows="7"
							class="textarea textarea-bordered w-full font-mono"
							placeholder="Enter optional content here"
						>{ location.Content.Content }</textarea>
						<div id="preview-content" class="flex items-center justify-center min-h-48 border border-base-300 hidden card w-full bg-base-200 rounded-[var(--rounded-btn)] p-5"></div>
						<div class="label">
							<span class="label-text-alt">This is shown to players after checking in.</span>
							<span class="label-text-alt flex flex-row content-center gap-1">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info w-5 h-5"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
								<span class="self-center">
									This app uses Markdown for formatting content. <a class="link" href="/admin/markdown" target="blank">Here's a quick guide</a>.
								</span>
							</span>
						</div>
					</label>
					<div class="w-full text-center md:text-start">
						<button class="btn btn-primary w-4/5 mx-auto my-5 md:my-0 md:mx-0 md:w-auto">Save</button>
					</div>
				</div>
				<!-- Sidebar -->
				<div class="flex flex-col">
					<!-- Map -->
					<div id="map" class="w-full aspect-square md:w-[35vw] lg:w-96 rounded-lg shadow-lg mt-5"></div>
					<div class="form-control">
						<label class="label cursor-pointer">
							<span class="label-text">Save map location</span>
							<input
								type="checkbox"
								name="location"
								class="checkbox checkbox-sm"
								checked="checked"
							/>
						</label>
					</div>
					<!-- Hidden inputs for form handling -->
					<input type="hidden" name="code" value={ location.Marker.Code }/>
					<input type="hidden" name="latitude" value={ floatToString(location.Marker.Lat) }/>
					<input type="hidden" name="longitude" value={ floatToString(location.Marker.Lng) }/>
					if settings.NavigationMethod == models.ShowClues {
						<!-- Clues -->
						<div class="label">
							<span class="label-text font-bold flex gap-3 items-center">
								Clues
							</span>
						</div>
						<div>
							for _, clue := range location.Clues {
								<div class="prose my-5 mx-3">
									<blockquote class="mb-0">
										<div class="flex gap-3 justify-end">
											{ clue.Content }
											<button type="button" class="btn btn-xs btn-ghost" onclick="this.previousElementSibling.classList.toggle('hidden')">
												<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil w-4 h-4"><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"></path><path d="m15 5 4 4"></path></svg>
												Edit
											</button>
											<button type="button" class="btn btn-xs btn-ghost text-error" onclick="this.closest('div').remove()">
												<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-delete w-4 h-4"><path d="M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z"></path><path d="m12 9 6 6"></path><path d="m18 9-6 6"></path></svg>
												Delete
											</button>
										</div>
									</blockquote>
								</div>
							}
						</div>
					}
				</div>
			</div>
		</div>
	</form>
	<dialog id="confirm_delete_modal" class="modal">
		<div class="modal-box prose outline outline-1 outline-offset-1 outline-error">
			<h3 class="text-lg font-bold">Delete this location?</h3>
			<p class="pt-4">You are about to delete this location. Are you sure?</p>
			<div class="modal-action">
				<button
					type="button"
					class="btn"
					onclick="confirm_delete_modal.close()"
				>Nevermind</button>
				<button
					type="button"
					class="btn btn-error"
					hx-delete={ fmt.Sprint("/admin/locations/", location.MarkerID) }
					hx-trigger="click"
					onclick="confirm_delete_modal.close()"
				>Delete</button>
			</div>
		</div>
	</dialog>
	<script>
// Delete modal
const confirm_delete_modal = document.getElementById('confirm_delete_modal');


</script>
	<script>
  function previewMD() {
    var checkBox = document.getElementById("togglePreview");
    var textarea = document.getElementById("content");
    var preview = document.getElementById("preview-content");

    if (checkBox.checked == true){
      textarea.classList.add("hidden");
      preview.classList.remove("hidden");
      preview.setAttribute("aria-busy", true)
      preview.innerHTML = "<span class='loading loading-ring loading-lg'></span>"

      var xhr = new XMLHttpRequest();
      xhr.open("POST", '/admin/markdown/preview', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(JSON.stringify({
        markdown: textarea.value
      }));

      xhr.onreadystatechange = (e) => {
        preview.innerHTML = xhr.response
      }
    } else {
      textarea.classList.remove("hidden");
      preview.classList.add("hidden");
      preview.innerHTML = null
    }
  }
</script>
	@locationScript()
}

templ locationScript() {
	<script>
(function () {
  let map; // Store the map instance globally within the IIFE
  let marker; // Store the marker instance globally within the IIFE

  function initializeMapAndTextarea() {
    // --- TEXTAREA AUTO-RESIZE LOGIC ---
    const tx = document.getElementsByTagName("textarea");
    for (let i = 0; i < tx.length; i++) {
      tx[i].setAttribute("style", "height:" + (tx[i].scrollHeight) + "px;overflow-y:hidden;");
      tx[i].addEventListener("input", function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + "px";
      });
    }

    // --- MAPBOX INITIALIZATION LOGIC ---
    let coords = [170.5111643, -45.8650509];
    let zoom = 14;

    // Check if longitude and latitude fields are set
    if (document.querySelector('input[name="longitude"]').value != "" && document.querySelector('input[name="latitude"]').value != "") {
      coords = [
        parseFloat(document.querySelector('input[name="longitude"]').value),
        parseFloat(document.querySelector('input[name="latitude"]').value)
      ];
      zoom = 16;
    }

    // Destroy existing map instance if it exists
    if (map) {
      map.remove();
      map = null; // Explicitly set to null to clear reference
    }

    // Set the Mapbox access token
    mapboxgl.accessToken = document.getElementById('mapbox_key').dataset.key;

    // Determine map style based on color scheme
    const style = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'mapbox://styles/nathanhollows/cl9w3nxff002m14sy9fco4vnr'
      : 'mapbox://styles/nathanhollows/clszboe2y005i01oid8ca37jm';

    // Create the map
    map = new mapboxgl.Map({
      container: 'map',
      style: style,
      center: coords,
      zoom: zoom
    });

    // Create and place marker
    marker = new mapboxgl.Marker()
      .setLngLat(coords)
      .addTo(map);

    // Update marker position on map drag
    map.on('drag', function() {
      const center = map.getCenter();
      marker.setLngLat(center);
      document.querySelector('input[name="latitude"]').value = center.lat;
      document.querySelector('input[name="longitude"]').value = center.lng;
      document.querySelector('input[name="location"]').checked = true;
    });

    // Update marker position on map zoom
    map.on('zoom', function() {
      const center = map.getCenter();
      marker.setLngLat(center);
    });

    // Add event listener for location saving switch
    document.querySelector('input[name="switch"]').addEventListener('change', function(e) {
      if (e.target.checked) {
        const center = map.getCenter();
        marker.setLngLat(center);
        document.querySelector('input[name="latitude"]').value = center.lat;
        document.querySelector('input[name="longitude"]').value = center.lng;
      } else {
        document.querySelector('input[name="latitude"]').value = "";
        document.querySelector('input[name="longitude"]').value = "";
      }
    });
  }

  // Initialize map and textarea on page load
  initializeMapAndTextarea();

})();
</script>
}
