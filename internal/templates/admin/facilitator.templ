package templates

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v4/internal/services"
	"github.com/nathanhollows/Rapua/v4/models"
)

templ FacilitatorLinkModal() {
	<div class="modal-box">
		<form method="dialog">
			<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
		</form>
		<h3 class="text-lg font-bold">Share activity overview with Facilitators</h3>
		<div class="prose py-4">
			<p>Create a link to share the activity overview with facilitators. They will see a list of all locations and how many teams are yet to visit.</p>
			<p>These links are only valid for a limited time and can be shared with anyone. Be cautious when sharing.</p>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text font-bold">Validity</span>
			</label>
			<select id="link-duration" name="duration" class="select w-full" name="duration">
				<option value="hour">1 hour</option>
				<option value="day" selected>1 day</option>
				<option value="week">1 week</option>
				<option value="month">1 month</option>
			</select>
		</div>
		<div class="modal-action">
			<form method="dialog">
				<!-- if there is a button in form, it will close the modal -->
				<button class="btn">Nevermind</button>
				<button
					hx-post="/admin/facilitator/create-link"
					hx-swap="innerHTML"
					hx-target="#facilitator_link_modal"
					hx-include="#link-duration"
					class="btn btn-primary ml-1"
				>Create link</button>
			</form>
		</div>
	</div>
}

templ FacilitatorLinkCopyModal(url string) {
	<div class="modal-box">
		<form method="dialog">
			<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
		</form>
		<h3 class="text-lg font-bold">Share activity overview with Facilitators</h3>
		<p class="prose pt-4 font-bold label-text mb-2">Share this link with facilitators:</p>
		<div class="join w-full">
			<input
				id="facilitator_link"
				class="input join-item w-full"
				value={ url }
			/>
			<button
				class="btn btn-outline join-item"
				_="on click
				    set link to #facilitator_link's value
						writeText(link) on navigator.clipboard
						set copyText to my innerHTML
						set my textContent to 'Copied!'
						wait 1.5s
						set my innerHTML to copyText
					"
			>
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-clipboard-copy w-4 h-4"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"></rect><path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2"></path><path d="M16 4h2a2 2 0 0 1 2 2v4"></path><path d="M21 14H11"></path><path d="m15 10-4 4 4 4"></path></svg>
				Copy Link
			</button>
		</div>
		<div class="modal-action">
			<form method="dialog">
				<!-- if there is a button in form, it will close the modal -->
				<button class="btn">Close</button>
			</form>
		</div>
	</div>
}

templ FacilitatorDashboard(locations []models.Location, activity []services.TeamActivity) {
	<script>
	window.setTimeout( function() {
		window.location.reload();
	}, 30000);
	</script>
	<main class="max-w-7xl m-auto pb-8">
		<h1 class="text-2xl font-bold m-5">
			Activity tracker
		</h1>
		<div class="grid stats my-5">
			<div class="stat">
				<div class="stat-figure text-primary">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users inline-block w-8 h-8"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
				</div>
				<div class="stat-title">Teams</div>
				<div class="stat-value">
					{ fmt.Sprintf("%d", len(activity)) }
				</div>
			</div>
			<div class="stat">
				<div class="stat-figure text-primary">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin inline-block w-8 h-8"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx="12" cy="10" r="3"></circle></svg>
				</div>
				<div class="stat-title">Locations</div>
				<div class="stat-value">
					{ fmt.Sprint(len(locations)) }
				</div>
			</div>
		</div>
		<div class="relative flex flex-col md:flex-row px-5 md:space-x-5">
			<div class="w-full">
				<div class="join join-vertical w-full">
					if len(locations) == 0 {
						<div role="alert" class="alert">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users inline-block w-8 h-8"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
							<span>No locations available</span>
							<div>
								<a href="/admin/locations/new" class="btn btn-sm btn-secondary">Add a location</a>
							</div>
						</div>
					}
					if len(locations) > 0 {
						<table class="table-pin-rows md:table-lg table w-full">
							<thead>
								<tr class="border-b-0">
									<th class="bg-base-200 rounded-s-box flex items-center gap-2 lg:py-3 text-base-content">
										<span>
											Location
										</span>
									</th>
									<th class="bg-base-200 lg:py-3 rounded-e-box text-end text-base-content">
										<span class="mr-7">
											Status
										</span>
									</th>
								</tr>
							</thead>
							<tbody>
								for _, location := range locations {
									<tr>
										<th class="font-normal">
											{ location.Name }
										</th>
										<td class="text-end flex flex-col gap-2 items-end">
											if location.TotalVisits == 0 {
												<span class="badge badge-ghost whitespace-nowrap">
													No visits yet
												</span>
											} else if location.TotalVisits >= len(activity) && location.CurrentCount == 0 {
												<span class="badge badge-success whitespace-nowrap">
													Complete!
												</span>
											} else {
												if location.Instance.Settings.CompletionMethod == models.CheckInAndOut {
													if location.CurrentCount > 0 {
														<span class="badge badge-accent whitespace-nowrap">
															{ fmt.Sprintf("%d", location.CurrentCount) } Currently Visiting
														</span>
													}
												}
												<span class="badge badge-secondary whitespace-nowrap">
													{ fmt.Sprintf("%d / %d", location.TotalVisits, len(activity)) } Visited
												</span>
											}
										</td>
									</tr>
								}
							</tbody>
						</table>
					}
				</div>
			</div>
		</div>
	</main>
}
