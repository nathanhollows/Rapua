
package templates

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v5/models"
)

var emptyGroupData = models.GameStructure{
	Name:       "New Group",
	Color:      "primary",
	Locations:  nil,
	SubGroups:  nil,
	Routing:    models.RouteStrategyFreeRoam,
	Navigation: models.NavigationDisplayCustom,
	IsRoot:     false,
}

templ LocationGroupList(settings models.InstanceSettings, groups models.GameStructure) {
	<!-- Header -->
	<div class="flex flex-col gap-3 md:flex-row justify-between items-center w-full p-5">
		<h1 class="text-2xl font-bold">
			Locations
			<span class="htmx-indicator loading loading-dots loading-md text-info">Updating</span>
		</h1>
		<span class="flex md:flex-row flex-wrap justify-center gap-5">
			<div class="join">
				<a
					href="/admin/locations/qr-codes.zip"
					class="btn btn-base join-item mb-3 md:mb-0"
				>
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-image-down"><path d="M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"></path> <path d="m14 19 3 3 v-5.5"></path> <path d="m17 22 3-3"></path> <circle cx="9" cy="9" r="2"></circle></svg>
					QR codes
				</a>
				<a
					class="btn btn-base join-item"
					href="/admin/locations/posters.pdf"
				>
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-down"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path> <path d="M14 2v4a2 2 0 0 0 2 2h4"></path> <path d="M12 18v-6"></path> <path d="m9 15 3 3 3-3"></path></svg>
					Posters
				</a>
			</div>
			<div class="join">
				<button
					class="btn btn-secondary join-item"
					_="on click
						set groupsArea to first .groups-area
						put #empty-group-template's innerHTML at start of groupsArea
						-- Initialize SortableJS on the new group's locations-area
						set newLocationsArea to groupsArea.querySelector('.group-item .locations-area')
						js(newLocationsArea)
							new Sortable(newLocationsArea, {
								group: 'locations',
								animation: 150,
								draggable: '.location-item',
								handle: '.location-drag-handle',
								ghostClass: 'sortable-ghost',
								chosenClass: 'sortable-chosen',
								dragClass: 'sortable-drag',
								invertSwap: true,
								onEnd: function(evt) {
									console.log('Location moved:', evt);
								}
							});
						end
						"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-group-icon lucide-group w-5 h-5"><path d="M3 7V5c0-1.1.9-2 2-2h2"></path><path d="M17 3h2c1.1 0 2 .9 2 2v2"></path><path d="M21 17v2c0 1.1-.9 2-2 2h-2"></path><path d="M7 21H5c-1.1 0-2-.9-2-2v-2"></path><rect width="7" height="5" x="7" y="7" rx="1"></rect><rect width="7" height="5" x="10" y="12" rx="1"></rect></svg>
					Add Group
				</button>
				<a
					href="/admin/locations/new"
					hx-boost="true"
					class="btn btn-secondary join-item"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin-plus w-5 h-5"><path d="M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"></path><circle cx="12" cy="10" r="3"></circle><path d="M16 18h6"></path><path d="M19 15v6"></path></svg>
					Add Location
				</a>
			</div>
		</span>
	</div>
	<template id="empty-group-template">
		@locationGroup(emptyGroupData)
	</template>
	<div class="px-6" id="root-container">
		@locationGroup(groups)
	</div>
	@sortableScript()
}

templ locationGroup(group models.GameStructure) {
	if group.IsRoot {
		<!-- Root locations area -->
		<div class="locations-area join join-vertical my-6 w-full bg-base-300 rounded-2xl" data-group-id={ group.ID }>
			for _, location := range group.Locations {
				@locationItem(*location)
			}
		</div>
		<!-- Root groups area -->
		<div class="groups-area space-y-6" data-group-id={ group.ID }>
			for _, subGroup := range group.SubGroups {
				@locationGroup(subGroup)
			}
		</div>
	} else {
		<!-- Nested group card -->
		<div class="group-item card shadow bg-primary/5 border border-primary/40 hover:border-primary/60 transition-colors" data-group-id={ group.ID } data-group-color={ group.Color }>
			<div class="card-body p-5 pt-3">
				<div class="flex justify-between items-center">
					<div class="flex items-center gap-3">
						<div class="tooltip lg:tooltip-top tooltip-right" data-tip="Drag to reorder group">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-grip-vertical text-base-content flex-shrink-0 cursor-move group-drag-handle"><circle cx="9" cy="12" r="1"></circle><circle cx="9" cy="5" r="1"></circle><circle cx="9" cy="19" r="1"></circle><circle cx="15" cy="12" r="1"></circle><circle cx="15" cy="5" r="1"></circle><circle cx="15" cy="19" r="1"></circle></svg>
						</div>
						@picker(group.Color)
						<input type="text" class="input input-ghost p-2 font-bold bg-transparent" value={ group.Name }/>
					</div>
					<div class="flex-grow cursor-move group-drag-handle min-h-8"></div>
					@groupMenu(group.Routing, len(group.Locations))
				</div>
				<!-- Locations area within group -->
				<div class="locations-area join join-vertical" data-group-id={ group.ID }>
					for _, location := range group.Locations {
						@locationItem(*location)
					}
				</div>
				<!-- Subgroups area within group - always show -->
				for _, subGroup := range group.SubGroups {
					@locationGroup(subGroup)
				}
			</div>
		</div>
	}
}

templ locationItem(location models.Location) {
	<div class="location-item join-item bg-base-100/60 hover:bg-base-200/60 p-4 border border-base-300/80" data-location-id={ location.ID }>
		<div class="loc flex items-center gap-3">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-grip-vertical text-base-content cursor-move location-drag-handle"><circle cx="9" cy="12" r="1"></circle><circle cx="9" cy="5" r="1"></circle><circle cx="9" cy="19" r="1"></circle><circle cx="15" cy="12" r="1"></circle><circle cx="15" cy="5" r="1"></circle><circle cx="15" cy="19" r="1"></circle></svg>
			<span class="tooltip cursor-help" data-tip="Has coordinates">
				<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx="12" cy="10" r="3"></circle></svg>
			</span>
			<span class="tooltip cursor-help" data-tip="Has clues">
				<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>
			</span>
			<div class="badge badge-sm badge-outline border-primary font-medium tooltip" data-tip="Location ID"><code>{ location.MarkerID }</code></div>
			<a
				href={ templ.SafeURL(fmt.Sprintf("/admin/locations/%s", location.MarkerID)) }
				class="link link-hover font-medium"
				hx-boost="true"
			>{ location.Name }</a>
			<div class="flex-grow cursor-move location-drag-handle min-h-4"></div>
			<span class="badge badge-primary badge-sm">{ fmt.Sprint(location.Points) } pts</span>
			@publishedToggle()
		</div>
	</div>
}

templ publishedToggle() {
	if false {
		<div>
			<label class="swap">
				<input type="checkbox"/>
				<label
					class="swap tooltip"
					data-tip="Published"
				>
					<input
						type="checkbox"
						checked
						_="on change
							set parent to the closest parent <label />
						if my.checked then
							set parent's @data-tip to 'Published'
						else
							set parent's @data-tip to 'Draft'
						end
					"
					/>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="swap-on lucide lucide-eye-icon lucide-eye w-5"><path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"></path><circle cx="12" cy="12" r="3"></circle></svg>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="swap-off lucide lucide-eye-closed-icon lucide-eye-closed w-5"><path d="m15 18-.722-3.25"></path><path d="M2 8a10.645 10.645 0 0 0 20 0"></path><path d="m20 15-1.726-2.05"></path><path d="m4 15 1.726-2.05"></path><path d="m9 18 .722-3.25"></path></svg>
				</label>
			</label>
		</div>
	}
}

templ visitationSettings(locationCount int) {
	if false {
		<div class="dropdown dropdown-bottom dropdown-center visitation-dropdown">
			<a tabindex="0" role="button" class="btn btn-sm btn-ghost">
				<span class="visit-button-icon">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check-check-icon lucide-check-check"><path d="M18 6 7 17l-5-5"></path><path d="m22 10-7.5 7.5L13 16"></path></svg>
				</span>
				<span class="visit-button-text">Visit All</span>
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down-icon lucide-chevron-down w-4 h-4"><path d="m6 9 6 6 6-6"></path></svg>
			</a>
			<div tabindex="0" class="dropdown-content bg-base-200 rounded-box z-[1] w-64 shadow">
				<!-- Visit All Menu Item -->
				<ul class="menu p-2 w-full">
					<li>
						<a
							role="button"
							class="visit-option"
							data-mode="all"
							_="on click
								set dropdown to closest <.visitation-dropdown/>
								set buttonText to dropdown.querySelector('.visit-button-text')
								set buttonIcon to dropdown.querySelector('.visit-button-icon')
								set buttonIcon's innerHTML to `<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-check-check-icon lucide-check-check'><path d='M18 6 7 17l-5-5'/><path d='m22 10-7.5 7.5L13 16'/></svg>`
								put 'Visit All' into buttonText
								remove .bg-base-300 from <.visit-option/>
								add .bg-base-300 to me"
						>
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check-check-icon lucide-check-check"><path d="M18 6 7 17l-5-5"></path><path d="m22 10-7.5 7.5L13 16"></path></svg>
							Visit All
						</a>
					</li>
				</ul>
				<!-- Visit N Slider Section -->
				<div class="p-3 pt-0">
					<label class="text-xs font-medium mb-2">Visit at least:</label>
					<div class="flex items-center gap-2">
						<input
							type="range"
							min="1"
							max={ fmt.Sprint(locationCount) }
							value={ fmt.Sprint(locationCount) }
							class="range range-primary range-sm flex-1 visit-slider"
							_="on input
								set dropdown to closest <.visitation-dropdown/>
								set buttonText to dropdown.querySelector('.visit-button-text')
								set buttonIcon to dropdown.querySelector('.visit-button-icon')
								if my.value == my.max then
									set buttonIcon's innerHTML to `<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-check-check-icon lucide-check-check'><path d='M18 6 7 17l-5-5'/><path d='m22 10-7.5 7.5L13 16'/></svg>`
									put 'Visit All' into buttonText
									remove .bg-base-300 from <.visit-option/>
								else
									set buttonIcon's innerHTML to `<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-check-icon lucide-check'><path d='M20 6 9 17l-5-5'/></svg>`
									put 'Visit ' + my.value into buttonText
									remove .bg-base-300 from <.visit-option/>
								end
								put my.value into the next <output/>"
						/>
						<output class="badge badge-sm badge-primary min-w-[3rem] text-center">{ fmt.Sprint(locationCount) }</output>
					</div>
					<div class="text-xs text-base-content/60 text-center">
						<span class="visit-disabled-msg hidden">Disabled in Ordered mode</span>
					</div>
				</div>
			</div>
		</div>
	}
}

templ groupMenu(nav models.RouteStrategy, locationCount int) {
	<div class="flex gap-2 items-center">
		@visitationSettings(locationCount)
		<!-- Route Strategy Picker -->
		@routeStrategyPicker(nav)
		<button
			class="btn btn-sm btn-ghost tooltip delete-group-btn"
			data-tip="Delete group"
			_="on click
				if I match .confirming then
					-- Actually delete the group
					set groupCard to closest <.group-item/>
					set rootLocationsArea to document.querySelector('#root-container .locations-area')
					-- Get ALL location items in this group (including nested ones)
					set allLocations to groupCard.querySelectorAll('.location-item')
					-- Move all locations to root
					for location in allLocations
						call rootLocationsArea.appendChild(location)
					end
					-- Remove the group card
					remove groupCard
				else
					-- First click: show confirmation
					add .confirming to me
					set my @data-tip to 'Are you sure?'
					add .tooltip-warning to me
					-- Reset after 2 seconds (non-blocking)
				end
			on mouseleave
				if I match .confirming then
					remove .confirming from me
					set my @data-tip to 'Delete group'
					remove .tooltip-warning from me
				end"
		>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
		</button>
	</div>
}

templ routeStrategyPicker(nav models.RouteStrategy) {
	<div class="dropdown dropdown-bottom dropdown-center route-dropdown">
		<a tabindex="0" role="button" class="btn btn-sm btn-ghost tooltip" data-tip="Route Strategy">
			<div class="route-strat contents">
				switch nav {
					case models.RouteStrategyOrdered:
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-list-ordered-icon lucide-list-ordered w-4"><path d="M10 12h11"></path><path d="M10 18h11"></path><path d="M10 6h11"></path><path d="M4 10h2"></path><path d="M4 6h1v4"></path><path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1"></path></svg>
						Ordered
					case models.RouteStrategyFreeRoam:
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-footprints-icon lucide-footprints w-4 h-5"><path d="M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z"></path><path d="M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z"></path><path d="M16 17h4"></path><path d="M4 13h4"></path></svg>
						Free Roam
					case models.RouteStrategyRandom:
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shuffle-icon lucide-shuffle h-4 w-4"><path d="m18 14 4 4-4 4"></path><path d="m18 2 4 4-4 4"></path><path d="M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22"></path><path d="M2 6h1.972a4 4 0 0 1 3.6 2.2"></path><path d="M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45"></path></svg>
						Random
				}
			</div>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down-icon lucide-chevron-down w-4 h-4"><path d="m6 9 6 6 6-6"></path></svg>
		</a>
		<ul tabindex="0" class="dropdown-content menu bg-base-200 rounded-box z-[1] w-52 p-2 shadow">
			<li>
				<button
					role="button"
					class="route-option"
					data-mode="freeroam"
					_="on click
						remove .bg-base-300 from <.route-option/>
						add .bg-base-300 to me
						set ((closest <.route-dropdown/>).querySelector('.route-strat')'s innerHTML) to my innerHTML
						set visitDropdown to (closest <.group-item/>).querySelector('.visitation-dropdown')
						remove @disabled from visitDropdown.querySelector('.visit-slider')
						remove @disabled from visitDropdown.querySelector('a[role=button]')
						add .hidden to visitDropdown.querySelector('.visit-disabled-msg')"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-footprints-icon lucide-footprints w-4 h-5"><path d="M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z"></path><path d="M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z"></path><path d="M16 17h4"></path><path d="M4 13h4"></path></svg>
					Free Roam
				</button>
			</li>
			<li>
				<button
					role="button"
					class="route-option"
					data-mode="ordered"
					_="on click
						remove .bg-base-300 from <.route-option/>
						add .bg-base-300 to me
						set ((closest <.route-dropdown/>).querySelector('.route-strat')'s innerHTML) to my innerHTML
						set visitDropdown to (closest <.group-item/>).querySelector('.visitation-dropdown')
						set visitSlider to visitDropdown.querySelector('.visit-slider')
						add @disabled to visitSlider
						add @disabled to visitDropdown.querySelector('a[role=button]')
						set visitSlider.value to visitSlider.max
						put 'Visit All' into visitDropdown.querySelector('.visit-button-text')
						remove .hidden from visitDropdown.querySelector('.visit-disabled-msg')"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-list-ordered-icon lucide-list-ordered w-4"><path d="M10 12h11"></path><path d="M10 18h11"></path><path d="M10 6h11"></path><path d="M4 10h2"></path><path d="M4 6h1v4"></path><path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1"></path></svg>
					Ordered
				</button>
			</li>
			<li>
				<button
					role="button"
					class="route-option"
					data-mode="random"
					_="on click
						remove .bg-base-300 from <.route-option/>
						add .bg-base-300 to me
						set ((closest <.route-dropdown/>).querySelector('.route-strat')'s innerHTML) to my innerHTML
						set visitDropdown to (closest <.group-item/>).querySelector('.visitation-dropdown')
						remove @disabled from visitDropdown.querySelector('.visit-slider')
						remove @disabled from visitDropdown.querySelector('a[role=button]')
						add .hidden to visitDropdown.querySelector('.visit-disabled-msg')"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shuffle-icon lucide-shuffle h-4 w-4"><path d="m18 14 4 4-4 4"></path><path d="m18 2 4 4-4 4"></path><path d="M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22"></path><path d="M2 6h1.972a4 4 0 0 1 3.6 2.2"></path><path d="M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45"></path></svg>
					Random
				</button>
			</li>
		</ul>
	</div>
}

func colours() []string {
	return []string{
		"primary", "secondary", "accent", "success", "info", "warning", "error", "base-content",
	}
}

templ picker(colour string) {
	<div class="dropdown dropdown-bottom">
		<div tabindex="0" role="button" class={ fmt.Sprintf("w-4 h-4 rounded-full bg-%s cursor-pointer tooltip", colour) } data-tip="Group color"></div>
		<ul tabindex="0" class="dropdown-content bg-base-200 rounded-box z-[1] p-2 shadow w-48">
			<div class="hidden bg-primary bg-secondary bg-accent bg-success bg-info bg-warning bg-error bg-base-content t"></div>
			<div class="menu menu-horizontal">
				for _, color := range colours() {
					<li>
						<a
							data-group-color={ color }
							class="cursor-pointer"
							_="on click set (closest <.card />)'s @data-group-color to my @data-group-color"
						>
							<div class={ fmt.Sprintf("w-4 h-4 rounded-full bg-%s", color) }></div>
						</a>
					</li>
				}
			</div>
		</ul>
	</div>
}

templ sortableScript() {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Initialize sortable for all locations-area elements
			document.querySelectorAll('.locations-area').forEach(function(el) {
				new Sortable(el, {
					group: 'locations',
					animation: 150,
					draggable: '.location-item',
					handle: '.location-drag-handle',
					ghostClass: 'sortable-ghost',
					chosenClass: 'sortable-chosen',
					dragClass: 'sortable-drag',
					// swapThreshold: 0.25,
					invertSwap: true,
					onEnd: function(evt) {
						// TODO: Send update to server
					}
				});
			});

			// Initialize sortable for all groups-area elements
			document.querySelectorAll('.groups-area').forEach(function(el) {
				new Sortable(el, {
					group: 'groups',
					animation: 150,
					draggable: '.group-item',
					handle: '.group-drag-handle',
					ghostClass: 'sortable-ghost',
					chosenClass: 'sortable-chosen',
					dragClass: 'sortable-drag',
					// swapThreshold: 0.25,
					invertSwap: true,
					onEnd: function(evt) {
						// TODO: Send update to server
					}
				});
			});

			// Initialize route strategy highlighting and visitation controls
			document.querySelectorAll('.route-dropdown').forEach(function(dropdown) {
				const currentText = dropdown.querySelector('.route-strat').textContent.trim();
				const options = dropdown.querySelectorAll('.route-option');
				const groupItem = dropdown.closest('.group-item');
				const visitDropdown = groupItem ? groupItem.querySelector('.visitation-dropdown') : null;

				options.forEach(function(option) {
					if (option.textContent.trim().includes(currentText)) {
						option.classList.add('bg-base-300');

						// If "Ordered" mode is selected, disable the visitation dropdown
						if (currentText === 'Ordered' && visitDropdown) {
							const visitSlider = visitDropdown.querySelector('.visit-slider');
							const visitButton = visitDropdown.querySelector('a[role=button]');
							const visitMsg = visitDropdown.querySelector('.visit-disabled-msg');

							if (visitSlider) {
								visitSlider.setAttribute('disabled', 'disabled');
								visitSlider.value = visitSlider.max;
							}
							if (visitButton) {
								visitButton.setAttribute('disabled', 'disabled');
							}
							if (visitMsg) {
								visitMsg.classList.remove('hidden');
							}
						}
					}
				});
			});

			// Initialize visit option highlighting
			document.querySelectorAll('.visitation-dropdown').forEach(function(dropdown) {
				const firstOption = dropdown.querySelector('.visit-option');
				if (firstOption) {
					firstOption.classList.add('bg-base-300');
				}
			});
		});
	</script>
	<style>
		.sortable-ghost {
			opacity: 0.4;
			background: hsl(var(--b2));
		}
		.sortable-chosen {
			opacity: 0.8;
		}
		.sortable-drag {
			opacity: 1;
		}
		/* Show drop zone hint when dragging */
		.sortable-drag ~ .locations-area:empty,
		.sortable-drag ~ .groups-area:empty,
		.locations-area:empty.sortable-drag-over,
		.groups-area:empty.sortable-drag-over {
			border-color: hsl(var(--p) / 0.5);
			background: hsl(var(--p) / 0.05);
		}
	</style>
}
