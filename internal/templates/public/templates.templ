package templates

import (
	"fmt"
	"github.com/nathanhollows/Rapua/v3/models"
	"time"
)

templ TemplatePeview(link models.ShareLink) {
	<div class="hero min-h-80 bg-gradient-to-br from-primary/30 to-primary/10">
		<div class="w-full items-start max-w-7xl hero-content flex-col p-8">
			<div class="badge badge-secondary -mb-3">Template</div>
			<h1 class="text-5xl font-black">
				{ link.Template.Name }
			</h1>
			<p class="py-6">
				<em>No description provided.</em>
			</p>
		</div>
	</div>
	<div class="max-w-7xl m-auto px-8 pt-8 w-full grid md:grid-cols-[1fr_24rem] gap-8">
		<main
			class="w-full h-full"
			_="on load wait 1s set my.style.height to my.offsetHeight + 'px'"
		>
			<section class="w-full max-w-full grow flex flex-col h-full">
				<div class="prose">
					<h2>Preview</h2>
				</div>
				<div class="mockup-browser border-base-300 border w-full flex-grow flex flex-col shadow-xl">
					<div class="mockup-browser-toolbar">
						<div class="flex gap-2 mx-auto">
							<button
								id="back"
								class="btn btn-sm btn-circle btn-ghost btn-disabled"
								_="
									on change from <select />
										if its value is not 'lobby' then remove .btn-disabled from me
										else add .btn-disabled to me 
									end
									on click 
									  set sel to #pages 
									  set i to sel.selectedIndex - 1
									  repeat while i >= 0 and sel.options[i].disabled 
										decrement i
									  end
									  if i >= 0 then 
										set sel.selectedIndex to i
										trigger change on sel
									  end
									"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"></path></svg>
							</button>
							<form
								hx-swap="innerHTML"
								hx-target="#preview"
								hx-vals={ fmt.Sprint(`{"instanceID": "`, link.TemplateID, `"}`) }
							>
								<input type="hidden" name="instanceID" value={ fmt.Sprint(link.TemplateID) }/>
								<select
									id="pages"
									class="select select-sm select-bordered w-56 md:w-96 mx-auto text-ellipsis"
									_="on load trigger change on me"
									name="page"
								>
									<option disabled class="font-bold">Pages</option>
									<option
										hx-trigger="chosen"
										hx-get="/lobby"
										selected
										value="lobby"
										_="
											on change from #pages
												if #pages.options[#pages.selectedIndex].value == me.value then
													send chosen to me	
												end
											end
											"
									>
										Lobby
									</option>
									<option
										hx-trigger="chosen"
										hx-get="/next"
										value="next"
										_="
											on change from #pages
												if #pages.options[#pages.selectedIndex].value == me.value then
													send chosen to me	
												end
											end
											"
									>
										Navigation
									</option>
									<option disabled>Locations</option>
									for _, location := range link.Template.Locations {
										<option
											hx-trigger="chosen"
											hx-get={ fmt.Sprint("/checkins/", location.MarkerID) }
											value={ location.MarkerID }
											class="location-option"
											_="
											on change from #pages
												if #pages.options[#pages.selectedIndex].value == me.value then
													send chosen to me	
												end
											end
											"
											if location.Marker.IsMapped() {
												data-lat={ fmt.Sprint(location.Marker.Lat) }
												data-lng={ fmt.Sprint(location.Marker.Lng) }
											}
										>{ location.Name }</option>
									}
								</select>
							</form>
							<button
								id="forward"
								class="btn btn-sm btn-circle btn-ghost"
								_="
								on change from <select />
									set sel to #pages 
									if sel.selectedIndex == sel.length - 1 then add .btn-disabled to me
									else remove .btn-disabled from me
								end
								on click 
									  set sel to #pages 
									  set i to sel.selectedIndex + 1
									  repeat while i < sel.length and sel.options[i].disabled 
										increment i
									  end
									  if i < sel.length then set sel.selectedIndex to i
									  trigger change on sel
								  "
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right"><path d="m9 18 6-6-6-6"></path></svg>
							</button>
						</div>
					</div>
					<div
						class=" border-t border-base-300 h-3/4 md:h-full overflow-scroll"
					>
						<div id="preview" class="overflow-scroll py-12" hx-disable>
							<span class="loading loading-spinner loading-lg"></span>
						</div>
					</div>
				</div>
			</section>
		</main>
		<aside id="sidebar" class="flex flex-col gap-5 md:w-96 h-min">
			<a
				class="btn btn-accent btn-lg group tooltip inline-flex items-center"
				onclick="launchTemplate()"
				data-id={ fmt.Sprint(link.ID) }
				data-name={ link.Template.Name }
				data-tip="Create a new game using this template."
			>
				Launch
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket w-4 h-4 group-hover:translate-x-1 group-hover:-translate-y-1 transition-transform"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"></path><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"></path><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"></path><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"></path></svg>
			</a>
			<div class="card bg-base-200 card-md shadow-sm">
				<div class="card-body">
					<h2 class="card-title">Template Details</h2>
					<div class="prose">
						<ul>
							<li>
								Created { link.CreatedAt.Format("2 Jan 2006") }
							</li>
							<li>
								if !link.ExpiresAt.After(link.CreatedAt.Add(100 * 365 * 24 * time.Hour)) {
									<span
										class="tooltip cursor-help underline decoration-dashed"
										data-tip="This link is temporary and will expire."
									>
										Expires { link.ExpiresAt.Format("2 Jan 2006") }
									</span>
								} else {
									<span
										class="tooltip cursor-help underline decoration-dashed"
										data-tip="This link will never expire."
									>
										Never expires
									</span>
								}
							</li>
							<li>
								if link.MaxUses == 0 {
									<span
										class="tooltip cursor-help underline decoration-dashed"
										data-tip="This template may be launched an unlimited number of times."
									>
										Unlimited launches
									</span>
								} else {
									<span
										class="tooltip cursor-help underline decoration-dashed"
										data-tip={ fmt.Sprintf("%d/%d launches left.", link.UsedCount, link.MaxUses) }
									>
										{ fmt.Sprintf("%d/%d launches", link.UsedCount, link.MaxUses) }
									</span>
								}
							</li>
							<li>
								<span
									class="tooltip cursor-help underline decoration-dashed"
									data-tip="Only those with the link can access this template."
								>
									Private link
								</span>
							</li>
						</ul>
					</div>
				</div>
			</div>
			<div class="card bg-base-200 card-md shadow-sm">
				<div class="card-body">
					<h2 class="card-title">Game Settings</h2>
					<div class="prose">
						<ul>
							<li>
								<strong>{ fmt.Sprint(len(link.Template.Locations)) }</strong> locations
							</li>
							<li>
								<span class="tooltip cursor-help underline decoration-dashed" data-tip={ link.Template.Settings.NavigationMode.Description() }>
									{ link.Template.Settings.NavigationMode.String() }
								</span>
							</li>
							<li>
								<span class="tooltip cursor-help underline decoration-dashed" data-tip={ link.Template.Settings.NavigationMethod.Description() }>
									Showing { link.Template.Settings.NavigationMethod.String() }
								</span>
							</li>
							if link.Template.Settings.EnablePoints {
								<li>
									Points are <strong>enabled</strong>
								</li>
								if link.Template.Settings.EnableBonusPoints {
									<li>
										Bonus points are <strong>enabled</strong>
									</li>
								} else {
									<li>
										Bonus points are <strong>disabled</strong>
									</li>
								}
							} else {
								<li>
									Points are <strong>disabled</strong>
								</li>
							}
						</ul>
					</div>
				</div>
			</div>
		</aside>
	</div>
	<div class="max-w-7xl m-auto px-8 w-full">
		<div id="map-container" class="relative w-full rounded-lg shadow-lg my-5 h-96">
			<div id="map-activity" class="map w-full h-full rounded-lg"></div>
		</div>
	</div>
	<script>
(function () {
  let map; // Store the map instance globally within the IIFE
  let markerArray = []; // Store the markers array globally within the IIFE
  const bounds = new mapboxgl.LngLatBounds();

  function initializeMap() {
    const locations = document.querySelectorAll('.location-option');
    // Calculate the center and zoom level based on the locations
    let coords = [170.5111643, -45.8650509];
    let zoom = 17;
    for (let i = 0; i < locations.length; i++) {
      const lat = parseFloat(locations[i].dataset.lat);
      const lng = parseFloat(locations[i].dataset.lng);
      if (lat !== 0 && lng !== 0) {
        coords = [lng, lat];
        break;
      }
    }

    // Clear any existing markers
    markerArray.forEach(marker => marker.remove());
    markerArray = [];

    // Destroy existing map instance if it exists
    if (map) {
      map.remove();
      map = null; // Explicitly set to null to clear reference
    }

    // Set the Mapbox access token
    mapboxgl.accessToken = document.getElementById('mapbox_key').dataset.key;

    // Determine the style based on color scheme
    const style = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'mapbox://styles/nathanhollows/cl9w3nxff002m14sy9fco4vnr'
      : 'mapbox://styles/nathanhollows/clszboe2y005i01oid8ca37jm';

    // Create the map
    map = new mapboxgl.Map({
      container: 'map-activity',
      style: style,
      center: coords,
      zoom: zoom,
      cooperativeGestures: true,
    });

    map.on('load', function () {
      map.resize();
    });

    // Find and loop through .location-name elements to create markers with original numbers
    locations.forEach(function (location, index) {
	  if (!location.dataset.lat || !location.dataset.lng) {
		return;
	  }

      // Create the marker
      const marker = new mapboxgl.Marker()
        .setLngLat([location.dataset.lng, location.dataset.lat])
        .setPopup(new mapboxgl.Popup({ offset: 25 }) // Add popups
		.setHTML(location.textContent));

		marker.getElement().addEventListener('mouseenter', function () {
		  popup = marker.getPopup();
			if (!popup.isOpen()) {
				marker.togglePopup();
			}
		});

		marker.getElement().addEventListener('mouseleave', function () {
			marker.togglePopup();	
		});

      markerArray.push(marker);


    });

    // Sort markers by latitude
    markerArray.sort(function (a, b) {
      return parseFloat(b.getLngLat().lat) - parseFloat(a.getLngLat().lat);
    });

    // Add markers to the map in the sorted order without changing their displayed numbers
    markerArray.forEach(marker => {
      marker.addTo(map);
    });

    // Fit the map to the bounds of the markers
    if (markerArray.length > 1) {
      markerArray.forEach(marker => {
        bounds.extend(marker.getLngLat());
      });

      map.fitBounds(bounds, { padding: 50 });
    }
  }

  // Function to zoom map when select#pages changes
  function handlePageChange() {
    const select = document.getElementById('pages');
    const selectedOption = select.options[select.selectedIndex];

    if (selectedOption.dataset.lat && selectedOption.dataset.lng) {
      const lat = parseFloat(selectedOption.dataset.lat);
      const lng = parseFloat(selectedOption.dataset.lng);

      if (!isNaN(lat) && !isNaN(lng)) {
        map.flyTo({ center: [lng, lat], zoom: 17 });
      }
    } else {
	  map.fitBounds(bounds, { padding: 50 });
	}
  }
  // Attach change event to select#pages
  document.getElementById('pages').addEventListener('change', handlePageChange);

  // Initialize the map on page load
  initializeMap();

})();
</script>
}
