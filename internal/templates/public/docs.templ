package templates

import (
	"github.com/nathanhollows/Rapua/v4/internal/services"
	"html/template"
	"strings"
)

templ recursiveSidebar(topPage *services.DocPage, page *services.DocPage, sidebar []*services.DocPage, isChild bool) {
	if (strings.Contains(page.Path, "deprecations.md")) {
	} else if !(strings.Contains(page.Path, "index.md") && page.Order != 1) {
		if len(page.Children) == 0 {
			<li>
				<a
					href={ templ.SafeURL(page.URL) }
					if topPage.URL == page.URL {
						class="menu-active"
					}
				>
					switch page.Title {
						case "Changelog":
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-diff w-5 h-5 stroke-success"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M9 10h6"></path><path d="M12 13V7"></path><path d="M9 17h6"></path></svg>
						case "Overview":
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-book-marked w-5 h-5 stroke-info"><path d="M10 2v8l3-3 3 3V2"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path></svg>
					}
					{ page.Title }
				</a>
			</li>
		} else {
			<li>
				<details open>
					<summary>
						switch page.Title {
							case "User Docs":
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-book-open w-5 h-5 text-accent"><path d="M12 7v14"></path><path d="M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z"></path></svg>
							case "Developer Docs":
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-code w-5 h-5 stroke-primary"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>
							case "Guides":
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-lightbulb w-5 h-5"><path d="M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5"></path><path d="M9 18h6"></path><path d="M10 22h4"></path></svg>
							case "Content Blocks":
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-grid-2x2-plus w-5 h-5"><path d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"></path><path d="M16 19h6"></path><path d="M19 22v-6"></path></svg>
						}
						if isChild {
							<h2 class="py-0 menu-title flex items-center gap-4 px-1.5">{ page.Title }</h2>
						} else {
							{ page.Title }
						}
					</summary>
					<ul>
						for _, child := range page.Children {
							@recursiveSidebar(topPage, child, sidebar, true)
						}
					</ul>
				</details>
			</li>
		}
	}
}

templ Docs(page *services.DocPage, sidebar []*services.DocPage) {
	<main class="max-w-7xl m-auto pb-8">
		<div class="drawer">
			<input id="my-drawer" type="checkbox" class="drawer-toggle"/>
			<div class="drawer-side z-20">
				<label for="my-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
				<ul hx-boost="true" class="menu bg-base-200 w-80 min-h-full overflow-y-scroll">
					<li>
						<a href="/about"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-book-open w-4 h-4"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path></svg> About</a>
					</li>
					<li>
						<a href="/pricing"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-dollar-sign w-4 h-4"><line x1="12" x2="12" y1="2" y2="22"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg> Pricing</a>
					</li>
					<div class="divider px-4">Docs</div>
					for _, item := range sidebar {
						@recursiveSidebar(page, item, sidebar, false)
					}
				</ul>
			</div>
		</div>
		<div class="flex flex-col md:flex-row w-full gap-8 p-5">
			<div class="md:w-min-content hidden lg:block">
				<ul hx-boost="true" class="menu rounded-box w-full md:w-72">
					for _, item := range sidebar {
						@recursiveSidebar(page, item, sidebar, false)
					}
				</ul>
			</div>
			if len(page.Headings) > 2 {
				<div class="md:w-min-content order-2 md:order-4">
					<ul id="toc" class="menu bg-base-200 rounded-box w-full md:w-72 sticky top-12">
						<li>
							<a class="menu-title">Table of Contents</a>
						</li>
						for _, item := range page.Headings {
							if item.Level < 3 {
								<li><a href={ templ.SafeURL("#" + item.ID) }>{ item.Text }</a></li>
							}
						}
					</ul>
				</div>
			}
			<section class="w-full prose prose-sm md:prose-base order-3">
				@templ.Raw(stringToMarkdown(page.Content))
			</section>
		</div>
	</main>
	<style>
	h1 a, h2 a, h3 a {
		opacity: 0.4;
  }
.prose pre code{
  text-wrap: auto;
  display: inline-flex;
  padding-right: 4em;
}
.mockup-code pre {
  overflow: hidden;
}
</style>
	<script>
(function() {
  function initScrollSpy() {
    // Remove previous event listeners if any
    if (window._onScrollSpyScroll) {
      window.removeEventListener("scroll", window._onScrollSpyScroll);
    }
    if (window._scrollSpyMenuLinks) {
      window._scrollSpyMenuLinks.forEach(link => {
        link.removeEventListener("click", link._onScrollSpyClick);
      });
    }

    // Get all navigation links and sections
    const menuLinks = document.querySelectorAll("#toc a");
    const sections = document.querySelectorAll(".prose h1, .prose h2");
    const scrollMargin = 7 * 16; // 3rem in pixels

    function onScroll() {
      let scrollPos = window.scrollY || document.documentElement.scrollTop || document.body.scrollTop;
      let offset = scrollMargin; // Offset for highlighting
      let found = false; // Flag to check if a section is matched

      sections.forEach(section => {
        let top = section.offsetTop - offset;
        let bottom = top + section.offsetHeight;

        if (scrollPos >= top && scrollPos < bottom) {
          found = true;
          menuLinks.forEach(link => {
            link.classList.remove("menu-active");
            if (link.hasAttribute("href") && link.getAttribute("href").substring(1) === section.id) {
              link.classList.add("menu-active");
            }
          });
        }
      });

      // If no section is matched and scrollPos is at the top, highlight the first menu link
      if (!found && scrollPos === 0) {
        menuLinks.forEach(link => link.classList.remove("menu-active"));
        if (menuLinks.length > 0) {
          menuLinks[0].classList.add("menu-active");
        }
      }
    }

    function onClick(event) {
      menuLinks.forEach(link => link.classList.remove("menu-active"));
      event.currentTarget.classList.add("menu-active");
    }

    // Attach the scroll event listener
    window._onScrollSpyScroll = onScroll;
    window.addEventListener("scroll", window._onScrollSpyScroll);

    // Attach click event listeners to menu links
    window._scrollSpyMenuLinks = menuLinks;
    menuLinks.forEach(link => {
      link._onScrollSpyClick = function(event) {
        onClick(event);
        setTimeout(onScroll, 100); // Re-run onScroll after a short delay
      };
      link.addEventListener("click", link._onScrollSpyClick);
    });

    // Initial check in case the page is already scrolled
    onScroll();
  }

  // Initialize scrollspy when the DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initScrollSpy);
  } else {
    initScrollSpy();
  }

  // Re-initialize after htmx content is swapped
  document.body.addEventListener("htmx:afterSwap", function(evt) {
    initScrollSpy();
  });
})();
</script>
	<style>
.prose img {
				border-radius: var(--rounded-box, 1rem);
}
</style>
}

templ MarkdownPreview(md template.HTML) {
	<div class="prose w-full">
		@templ.Raw(md)
	</div>
}
