package templates

import (
	"github.com/nathanhollows/Rapua/services"
	"html/template"
	"strings"
)

templ recursiveSidebar(topPage *services.DocPage, page *services.DocPage, sidebar []*services.DocPage) {
	if !(strings.Contains(page.Path, "index.md") && page.Order != 1) {
		<li>
			<a
				href={ templ.SafeURL(page.URL) }
				if topPage.URL == page.URL {
					class="active"
				}
			>{ page.Title }</a>
			if len(page.Children) > 0 {
				<ul>
					for _, child := range page.Children {
						@recursiveSidebar(topPage, child, sidebar)
					}
				</ul>
			}
		</li>
	}
}

templ Docs(page *services.DocPage, sidebar []*services.DocPage) {
	<main class="max-w-7xl m-auto pb-8">
		<!-- Menu and content w/ flex-->
		<div class="flex flex-col md:flex-row w-full gap-8 p-5">
			<div class="w-min-content">
				<ul hx-boost="true" class="menu bg-base-200 rounded-box w-56">
					for _, item := range sidebar {
						@recursiveSidebar(page, item, sidebar)
					}
				</ul>
			</div>
			<section class="w-full prose">
				@templ.Raw(stringToMarkdown(page.Content))
			</section>
			if len(page.Headings) > 2 {
				<div class="w-min-content">
					<ul id="toc" class="menu bg-base-200 rounded-box w-72 sticky top-12">
						<li>
							<a class="menu-title">Table of Contents</a>
							<ul>
								for _, item := range page.Headings {
									<li><a href={ templ.SafeURL("#" + item.ID) }>{ item.Text }</a></li>
								}
							</ul>
						</li>
					</ul>
				</div>
			}
		</div>
	</main>
	<style>
.prose pre code{
  text-wrap: auto;
  display: inline-flex;
  padding-right: 4em;
}
.mockup-code pre {
  overflow: hidden;
}
</style>
	<script>
(function() {
  function initScrollSpy() {
    // Remove previous event listeners if any
    if (window._onScrollSpyScroll) {
      window.removeEventListener("scroll", window._onScrollSpyScroll);
    }
    if (window._scrollSpyMenuLinks) {
      window._scrollSpyMenuLinks.forEach(link => {
        link.removeEventListener("click", link._onScrollSpyClick);
      });
    }

    // Get all navigation links and sections
    const menuLinks = document.querySelectorAll("#toc a");
    const sections = document.querySelectorAll(".prose h1, .prose h2");
    const scrollMargin = 7 * 16; // 3rem in pixels

    function onScroll() {
      let scrollPos = window.scrollY || document.documentElement.scrollTop || document.body.scrollTop;
      let offset = scrollMargin; // Offset for highlighting
      let found = false; // Flag to check if a section is matched

      sections.forEach(section => {
        let top = section.offsetTop - offset;
        let bottom = top + section.offsetHeight;

        if (scrollPos >= top && scrollPos < bottom) {
          found = true;
          menuLinks.forEach(link => {
            link.classList.remove("active");
            if (link.hasAttribute("href") && link.getAttribute("href").substring(1) === section.id) {
              link.classList.add("active");
            }
          });
        }
      });

      // If no section is matched and scrollPos is at the top, highlight the first menu link
      if (!found && scrollPos === 0) {
        menuLinks.forEach(link => link.classList.remove("active"));
        if (menuLinks.length > 0) {
          menuLinks[0].classList.add("active");
        }
      }
    }

    function onClick(event) {
      menuLinks.forEach(link => link.classList.remove("active"));
      event.currentTarget.classList.add("active");
    }

    // Attach the scroll event listener
    window._onScrollSpyScroll = onScroll;
    window.addEventListener("scroll", window._onScrollSpyScroll);

    // Attach click event listeners to menu links
    window._scrollSpyMenuLinks = menuLinks;
    menuLinks.forEach(link => {
      link._onScrollSpyClick = function(event) {
        onClick(event);
        setTimeout(onScroll, 100); // Re-run onScroll after a short delay
      };
      link.addEventListener("click", link._onScrollSpyClick);
    });

    // Initial check in case the page is already scrolled
    onScroll();
  }

  // Initialize scrollspy when the DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initScrollSpy);
  } else {
    initScrollSpy();
  }

  // Re-initialize after htmx content is swapped
  document.body.addEventListener("htmx:afterSwap", function(evt) {
    initScrollSpy();
  });
})();
</script>
}

templ MarkdownPreview(md template.HTML) {
	<div class="prose w-full">
		@templ.Raw(md)
	</div>
}
